ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"nrf24.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	payload_len,1,1
  19              		.section	.text.nrf24_init,"ax",%progbits
  20              		.align	2
  21              		.global	nrf24_init
  22              		.thumb
  23              		.thumb_func
  24              		.type	nrf24_init, %function
  25              	nrf24_init:
  26              	.LFB63:
  27              		.file 1 ".\\nrf24.c"
   1:.\nrf24.c     **** /*
   2:.\nrf24.c     **** * ----------------------------------------------------------------------------
   3:.\nrf24.c     **** * â€œTHE COFFEEWARE LICENSEâ€ (Revision 1):
   4:.\nrf24.c     **** * <ihsan@kehribar.me> wrote this file. As long as you retain this notice you
   5:.\nrf24.c     **** * can do whatever you want with this stuff. If we meet some day, and you think
   6:.\nrf24.c     **** * this stuff is worth it, you can buy me a coffee in return.
   7:.\nrf24.c     **** * -----------------------------------------------------------------------------
   8:.\nrf24.c     **** * This library is based on this library: 
   9:.\nrf24.c     **** *   https://github.com/aaronds/arduino-nrf24l01
  10:.\nrf24.c     **** * Which is based on this library: 
  11:.\nrf24.c     **** *   http://www.tinkerer.eu/AVRLib/nRF24L01
  12:.\nrf24.c     **** * -----------------------------------------------------------------------------
  13:.\nrf24.c     **** */
  14:.\nrf24.c     **** #include "nrf24.h"
  15:.\nrf24.c     **** 
  16:.\nrf24.c     **** uint8_t payload_len;
  17:.\nrf24.c     **** 
  18:.\nrf24.c     **** /* init the hardware pins */
  19:.\nrf24.c     **** void nrf24_init() 
  20:.\nrf24.c     **** {
  28              		.loc 1 20 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 2


  21:.\nrf24.c     ****     SPIM_Funk_Start();
  38              		.loc 1 21 0
  39 0004 FFF7FEFF 		bl	SPIM_Funk_Start
  22:.\nrf24.c     ****     nrf24_ce_digitalWrite(LOW);
  40              		.loc 1 22 0
  41 0008 0020     		movs	r0, #0
  42 000a FFF7FEFF 		bl	nrf24_ce_digitalWrite
  23:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);    
  43              		.loc 1 23 0
  44 000e 0120     		movs	r0, #1
  45 0010 FFF7FEFF 		bl	nrf24_csn_digitalWrite
  24:.\nrf24.c     **** }
  46              		.loc 1 24 0
  47 0014 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE63:
  50              		.size	nrf24_init, .-nrf24_init
  51 0016 00BF     		.section	.text.nrf24_config,"ax",%progbits
  52              		.align	2
  53              		.global	nrf24_config
  54              		.thumb
  55              		.thumb_func
  56              		.type	nrf24_config, %function
  57              	nrf24_config:
  58              	.LFB64:
  25:.\nrf24.c     **** 
  26:.\nrf24.c     **** /* configure the module */
  27:.\nrf24.c     **** void nrf24_config(uint8_t channel, uint8_t pay_length)
  28:.\nrf24.c     **** {
  59              		.loc 1 28 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 8
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 82B0     		sub	sp, sp, #8
  68              		.cfi_def_cfa_offset 16
  69 0004 00AF     		add	r7, sp, #0
  70              		.cfi_def_cfa_register 7
  71 0006 0346     		mov	r3, r0
  72 0008 0A46     		mov	r2, r1
  73 000a FB71     		strb	r3, [r7, #7]
  74 000c 1346     		mov	r3, r2
  75 000e BB71     		strb	r3, [r7, #6]
  29:.\nrf24.c     ****     /* Use static payload length ... */
  30:.\nrf24.c     ****     payload_len = pay_length;
  76              		.loc 1 30 0
  77 0010 1F4A     		ldr	r2, .L3
  78 0012 BB79     		ldrb	r3, [r7, #6]
  79 0014 1370     		strb	r3, [r2]
  31:.\nrf24.c     **** 
  32:.\nrf24.c     ****     // Set RF channel
  33:.\nrf24.c     ****     nrf24_configRegister(RF_CH,channel);
  80              		.loc 1 33 0
  81 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 3


  82 0018 0520     		movs	r0, #5
  83 001a 1946     		mov	r1, r3
  84 001c FFF7FEFF 		bl	nrf24_configRegister
  34:.\nrf24.c     **** 
  35:.\nrf24.c     ****     // Set length of incoming payload 
  36:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P0, 0x00); // Auto-ACK pipe ...
  85              		.loc 1 36 0
  86 0020 1120     		movs	r0, #17
  87 0022 0021     		movs	r1, #0
  88 0024 FFF7FEFF 		bl	nrf24_configRegister
  37:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P1, payload_len); // Data payload pipe
  89              		.loc 1 37 0
  90 0028 194B     		ldr	r3, .L3
  91 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  92 002c 1220     		movs	r0, #18
  93 002e 1946     		mov	r1, r3
  94 0030 FFF7FEFF 		bl	nrf24_configRegister
  38:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P2, 0x00); // Pipe not used 
  95              		.loc 1 38 0
  96 0034 1320     		movs	r0, #19
  97 0036 0021     		movs	r1, #0
  98 0038 FFF7FEFF 		bl	nrf24_configRegister
  39:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P3, 0x00); // Pipe not used 
  99              		.loc 1 39 0
 100 003c 1420     		movs	r0, #20
 101 003e 0021     		movs	r1, #0
 102 0040 FFF7FEFF 		bl	nrf24_configRegister
  40:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P4, 0x00); // Pipe not used 
 103              		.loc 1 40 0
 104 0044 1520     		movs	r0, #21
 105 0046 0021     		movs	r1, #0
 106 0048 FFF7FEFF 		bl	nrf24_configRegister
  41:.\nrf24.c     ****     nrf24_configRegister(RX_PW_P5, 0x00); // Pipe not used 
 107              		.loc 1 41 0
 108 004c 1620     		movs	r0, #22
 109 004e 0021     		movs	r1, #0
 110 0050 FFF7FEFF 		bl	nrf24_configRegister
  42:.\nrf24.c     **** 
  43:.\nrf24.c     ****     // 1 Mbps, TX gain: 0dbm
  44:.\nrf24.c     ****     nrf24_configRegister(RF_SETUP, (0<<RF_DR)|((0x03)<<RF_PWR));
 111              		.loc 1 44 0
 112 0054 0620     		movs	r0, #6
 113 0056 0621     		movs	r1, #6
 114 0058 FFF7FEFF 		bl	nrf24_configRegister
  45:.\nrf24.c     **** 
  46:.\nrf24.c     ****     // CRC enable, 1 byte CRC length
  47:.\nrf24.c     ****     nrf24_configRegister(CONFIG,nrf24_CONFIG);
 115              		.loc 1 47 0
 116 005c 0020     		movs	r0, #0
 117 005e 0821     		movs	r1, #8
 118 0060 FFF7FEFF 		bl	nrf24_configRegister
  48:.\nrf24.c     **** 
  49:.\nrf24.c     ****     // Auto Acknowledgment
  50:.\nrf24.c     ****     nrf24_configRegister(EN_AA,(1<<ENAA_P0)|(1<<ENAA_P1)|(0<<ENAA_P2)|(0<<ENAA_P3)|(0<<ENAA_P4)|(0<
 119              		.loc 1 50 0
 120 0064 0120     		movs	r0, #1
 121 0066 0321     		movs	r1, #3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 4


 122 0068 FFF7FEFF 		bl	nrf24_configRegister
  51:.\nrf24.c     **** 
  52:.\nrf24.c     ****     // Enable RX addresses
  53:.\nrf24.c     ****     nrf24_configRegister(EN_RXADDR,(1<<ERX_P0)|(1<<ERX_P1)|(0<<ERX_P2)|(0<<ERX_P3)|(0<<ERX_P4)|(0<<
 123              		.loc 1 53 0
 124 006c 0220     		movs	r0, #2
 125 006e 0321     		movs	r1, #3
 126 0070 FFF7FEFF 		bl	nrf24_configRegister
  54:.\nrf24.c     **** 
  55:.\nrf24.c     ****     // Auto retransmit delay: 1000 us and Up to 15 retransmit trials
  56:.\nrf24.c     ****     nrf24_configRegister(SETUP_RETR,(0x04<<ARD)|(0x0F<<ARC));
 127              		.loc 1 56 0
 128 0074 0420     		movs	r0, #4
 129 0076 4F21     		movs	r1, #79
 130 0078 FFF7FEFF 		bl	nrf24_configRegister
  57:.\nrf24.c     **** 
  58:.\nrf24.c     ****     // Dynamic length configurations: No dynamic length
  59:.\nrf24.c     ****     nrf24_configRegister(DYNPD,(0<<DPL_P0)|(0<<DPL_P1)|(0<<DPL_P2)|(0<<DPL_P3)|(0<<DPL_P4)|(0<<DPL_
 131              		.loc 1 59 0
 132 007c 1C20     		movs	r0, #28
 133 007e 0021     		movs	r1, #0
 134 0080 FFF7FEFF 		bl	nrf24_configRegister
  60:.\nrf24.c     **** 
  61:.\nrf24.c     ****     // Start listening
  62:.\nrf24.c     ****     nrf24_powerUpRx();
 135              		.loc 1 62 0
 136 0084 FFF7FEFF 		bl	nrf24_powerUpRx
  63:.\nrf24.c     **** }
 137              		.loc 1 63 0
 138 0088 0837     		adds	r7, r7, #8
 139              		.cfi_def_cfa_offset 8
 140 008a BD46     		mov	sp, r7
 141              		.cfi_def_cfa_register 13
 142              		@ sp needed
 143 008c 80BD     		pop	{r7, pc}
 144              	.L4:
 145 008e 00BF     		.align	2
 146              	.L3:
 147 0090 00000000 		.word	payload_len
 148              		.cfi_endproc
 149              	.LFE64:
 150              		.size	nrf24_config, .-nrf24_config
 151              		.section	.text.nrf24_rx_address,"ax",%progbits
 152              		.align	2
 153              		.global	nrf24_rx_address
 154              		.thumb
 155              		.thumb_func
 156              		.type	nrf24_rx_address, %function
 157              	nrf24_rx_address:
 158              	.LFB65:
  64:.\nrf24.c     **** 
  65:.\nrf24.c     **** /* Set the RX address */
  66:.\nrf24.c     **** void nrf24_rx_address(uint8_t * adr) 
  67:.\nrf24.c     **** {
 159              		.loc 1 67 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 5


 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              		.cfi_def_cfa_offset 8
 165              		.cfi_offset 7, -8
 166              		.cfi_offset 14, -4
 167 0002 82B0     		sub	sp, sp, #8
 168              		.cfi_def_cfa_offset 16
 169 0004 00AF     		add	r7, sp, #0
 170              		.cfi_def_cfa_register 7
 171 0006 7860     		str	r0, [r7, #4]
  68:.\nrf24.c     ****     nrf24_ce_digitalWrite(LOW);
 172              		.loc 1 68 0
 173 0008 0020     		movs	r0, #0
 174 000a FFF7FEFF 		bl	nrf24_ce_digitalWrite
  69:.\nrf24.c     ****     nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 175              		.loc 1 69 0
 176 000e 0B20     		movs	r0, #11
 177 0010 7968     		ldr	r1, [r7, #4]
 178 0012 0522     		movs	r2, #5
 179 0014 FFF7FEFF 		bl	nrf24_writeRegister
  70:.\nrf24.c     ****     nrf24_ce_digitalWrite(HIGH);
 180              		.loc 1 70 0
 181 0018 0120     		movs	r0, #1
 182 001a FFF7FEFF 		bl	nrf24_ce_digitalWrite
  71:.\nrf24.c     **** }
 183              		.loc 1 71 0
 184 001e 0837     		adds	r7, r7, #8
 185              		.cfi_def_cfa_offset 8
 186 0020 BD46     		mov	sp, r7
 187              		.cfi_def_cfa_register 13
 188              		@ sp needed
 189 0022 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE65:
 192              		.size	nrf24_rx_address, .-nrf24_rx_address
 193              		.section	.text.nrf24_payload_length,"ax",%progbits
 194              		.align	2
 195              		.global	nrf24_payload_length
 196              		.thumb
 197              		.thumb_func
 198              		.type	nrf24_payload_length, %function
 199              	nrf24_payload_length:
 200              	.LFB66:
  72:.\nrf24.c     **** 
  73:.\nrf24.c     **** /* Returns the payload length */
  74:.\nrf24.c     **** uint8_t nrf24_payload_length()
  75:.\nrf24.c     **** {
 201              		.loc 1 75 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 80B4     		push	{r7}
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 00AF     		add	r7, sp, #0
 210              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 6


  76:.\nrf24.c     ****     return payload_len;
 211              		.loc 1 76 0
 212 0004 034B     		ldr	r3, .L8
 213 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  77:.\nrf24.c     **** }
 214              		.loc 1 77 0
 215 0008 1846     		mov	r0, r3
 216 000a BD46     		mov	sp, r7
 217              		.cfi_def_cfa_register 13
 218              		@ sp needed
 219 000c 5DF8047B 		ldr	r7, [sp], #4
 220              		.cfi_restore 7
 221              		.cfi_def_cfa_offset 0
 222 0010 7047     		bx	lr
 223              	.L9:
 224 0012 00BF     		.align	2
 225              	.L8:
 226 0014 00000000 		.word	payload_len
 227              		.cfi_endproc
 228              	.LFE66:
 229              		.size	nrf24_payload_length, .-nrf24_payload_length
 230              		.section	.text.nrf24_tx_address,"ax",%progbits
 231              		.align	2
 232              		.global	nrf24_tx_address
 233              		.thumb
 234              		.thumb_func
 235              		.type	nrf24_tx_address, %function
 236              	nrf24_tx_address:
 237              	.LFB67:
  78:.\nrf24.c     **** 
  79:.\nrf24.c     **** /* Set the TX address */
  80:.\nrf24.c     **** void nrf24_tx_address(uint8_t* adr)
  81:.\nrf24.c     **** {
 238              		.loc 1 81 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 8
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242 0000 80B5     		push	{r7, lr}
 243              		.cfi_def_cfa_offset 8
 244              		.cfi_offset 7, -8
 245              		.cfi_offset 14, -4
 246 0002 82B0     		sub	sp, sp, #8
 247              		.cfi_def_cfa_offset 16
 248 0004 00AF     		add	r7, sp, #0
 249              		.cfi_def_cfa_register 7
 250 0006 7860     		str	r0, [r7, #4]
  82:.\nrf24.c     ****     /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
  83:.\nrf24.c     ****     nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 251              		.loc 1 83 0
 252 0008 0A20     		movs	r0, #10
 253 000a 7968     		ldr	r1, [r7, #4]
 254 000c 0522     		movs	r2, #5
 255 000e FFF7FEFF 		bl	nrf24_writeRegister
  84:.\nrf24.c     ****     nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 256              		.loc 1 84 0
 257 0012 1020     		movs	r0, #16
 258 0014 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 7


 259 0016 0522     		movs	r2, #5
 260 0018 FFF7FEFF 		bl	nrf24_writeRegister
  85:.\nrf24.c     **** }
 261              		.loc 1 85 0
 262 001c 0837     		adds	r7, r7, #8
 263              		.cfi_def_cfa_offset 8
 264 001e BD46     		mov	sp, r7
 265              		.cfi_def_cfa_register 13
 266              		@ sp needed
 267 0020 80BD     		pop	{r7, pc}
 268              		.cfi_endproc
 269              	.LFE67:
 270              		.size	nrf24_tx_address, .-nrf24_tx_address
 271 0022 00BF     		.section	.text.nrf24_dataReady,"ax",%progbits
 272              		.align	2
 273              		.global	nrf24_dataReady
 274              		.thumb
 275              		.thumb_func
 276              		.type	nrf24_dataReady, %function
 277              	nrf24_dataReady:
 278              	.LFB68:
  86:.\nrf24.c     **** 
  87:.\nrf24.c     **** /* Checks if data is available for reading */
  88:.\nrf24.c     **** /* Returns 1 if data is ready ... */
  89:.\nrf24.c     **** uint8_t nrf24_dataReady() 
  90:.\nrf24.c     **** {
 279              		.loc 1 90 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 8
 282              		@ frame_needed = 1, uses_anonymous_args = 0
 283 0000 80B5     		push	{r7, lr}
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 82B0     		sub	sp, sp, #8
 288              		.cfi_def_cfa_offset 16
 289 0004 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
  91:.\nrf24.c     ****     // See note in getData() function - just checking RX_DR isn't good enough
  92:.\nrf24.c     ****     uint8_t status = nrf24_getStatus();
 291              		.loc 1 92 0
 292 0006 FFF7FEFF 		bl	nrf24_getStatus
 293 000a 0346     		mov	r3, r0
 294 000c FB71     		strb	r3, [r7, #7]
  93:.\nrf24.c     **** 
  94:.\nrf24.c     ****     // We can short circuit on RX_DR, but if it's not set, we still need
  95:.\nrf24.c     ****     // to check the FIFO for any pending packets
  96:.\nrf24.c     ****     if ( status & (1 << RX_DR) ) 
 295              		.loc 1 96 0
 296 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 297 0010 03F04003 		and	r3, r3, #64
 298 0014 002B     		cmp	r3, #0
 299 0016 01D0     		beq	.L12
  97:.\nrf24.c     ****     {
  98:.\nrf24.c     ****         return 1;
 300              		.loc 1 98 0
 301 0018 0123     		movs	r3, #1
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 8


 302 001a 07E0     		b	.L13
 303              	.L12:
  99:.\nrf24.c     ****     }
 100:.\nrf24.c     **** 
 101:.\nrf24.c     ****     return !nrf24_rxFifoEmpty();;
 304              		.loc 1 101 0
 305 001c FFF7FEFF 		bl	nrf24_rxFifoEmpty
 306 0020 0346     		mov	r3, r0
 307 0022 002B     		cmp	r3, #0
 308 0024 0CBF     		ite	eq
 309 0026 0123     		moveq	r3, #1
 310 0028 0023     		movne	r3, #0
 311 002a DBB2     		uxtb	r3, r3
 312              	.L13:
 102:.\nrf24.c     **** }
 313              		.loc 1 102 0
 314 002c 1846     		mov	r0, r3
 315 002e 0837     		adds	r7, r7, #8
 316              		.cfi_def_cfa_offset 8
 317 0030 BD46     		mov	sp, r7
 318              		.cfi_def_cfa_register 13
 319              		@ sp needed
 320 0032 80BD     		pop	{r7, pc}
 321              		.cfi_endproc
 322              	.LFE68:
 323              		.size	nrf24_dataReady, .-nrf24_dataReady
 324              		.section	.text.nrf24_rxFifoEmpty,"ax",%progbits
 325              		.align	2
 326              		.global	nrf24_rxFifoEmpty
 327              		.thumb
 328              		.thumb_func
 329              		.type	nrf24_rxFifoEmpty, %function
 330              	nrf24_rxFifoEmpty:
 331              	.LFB69:
 103:.\nrf24.c     **** 
 104:.\nrf24.c     **** /* Checks if receive FIFO is empty or not */
 105:.\nrf24.c     **** uint8_t nrf24_rxFifoEmpty()
 106:.\nrf24.c     **** {
 332              		.loc 1 106 0
 333              		.cfi_startproc
 334              		@ args = 0, pretend = 0, frame = 8
 335              		@ frame_needed = 1, uses_anonymous_args = 0
 336 0000 80B5     		push	{r7, lr}
 337              		.cfi_def_cfa_offset 8
 338              		.cfi_offset 7, -8
 339              		.cfi_offset 14, -4
 340 0002 82B0     		sub	sp, sp, #8
 341              		.cfi_def_cfa_offset 16
 342 0004 00AF     		add	r7, sp, #0
 343              		.cfi_def_cfa_register 7
 107:.\nrf24.c     ****     uint8_t fifoStatus;
 108:.\nrf24.c     **** 
 109:.\nrf24.c     ****     nrf24_readRegister(FIFO_STATUS,&fifoStatus,1);
 344              		.loc 1 109 0
 345 0006 FB1D     		adds	r3, r7, #7
 346 0008 1720     		movs	r0, #23
 347 000a 1946     		mov	r1, r3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 9


 348 000c 0122     		movs	r2, #1
 349 000e FFF7FEFF 		bl	nrf24_readRegister
 110:.\nrf24.c     ****     
 111:.\nrf24.c     ****     return (fifoStatus & (1 << RX_EMPTY));
 350              		.loc 1 111 0
 351 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 352 0014 03F00103 		and	r3, r3, #1
 353 0018 DBB2     		uxtb	r3, r3
 112:.\nrf24.c     **** }
 354              		.loc 1 112 0
 355 001a 1846     		mov	r0, r3
 356 001c 0837     		adds	r7, r7, #8
 357              		.cfi_def_cfa_offset 8
 358 001e BD46     		mov	sp, r7
 359              		.cfi_def_cfa_register 13
 360              		@ sp needed
 361 0020 80BD     		pop	{r7, pc}
 362              		.cfi_endproc
 363              	.LFE69:
 364              		.size	nrf24_rxFifoEmpty, .-nrf24_rxFifoEmpty
 365 0022 00BF     		.section	.text.nrf24_payloadLength,"ax",%progbits
 366              		.align	2
 367              		.global	nrf24_payloadLength
 368              		.thumb
 369              		.thumb_func
 370              		.type	nrf24_payloadLength, %function
 371              	nrf24_payloadLength:
 372              	.LFB70:
 113:.\nrf24.c     **** 
 114:.\nrf24.c     **** /* Returns the length of data waiting in the RX fifo */
 115:.\nrf24.c     **** uint8_t nrf24_payloadLength()
 116:.\nrf24.c     **** {
 373              		.loc 1 116 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 82B0     		sub	sp, sp, #8
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
 117:.\nrf24.c     ****     uint8_t status;
 118:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 385              		.loc 1 118 0
 386 0006 0020     		movs	r0, #0
 387 0008 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 119:.\nrf24.c     ****     spi_transfer(R_RX_PL_WID);
 388              		.loc 1 119 0
 389 000c 6020     		movs	r0, #96
 390 000e FFF7FEFF 		bl	spi_transfer
 120:.\nrf24.c     ****     status = spi_transfer(0x00);
 391              		.loc 1 120 0
 392 0012 0020     		movs	r0, #0
 393 0014 FFF7FEFF 		bl	spi_transfer
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 10


 394 0018 0346     		mov	r3, r0
 395 001a FB71     		strb	r3, [r7, #7]
 121:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 396              		.loc 1 121 0
 397 001c 0120     		movs	r0, #1
 398 001e FFF7FEFF 		bl	nrf24_csn_digitalWrite
 122:.\nrf24.c     ****     return status;
 399              		.loc 1 122 0
 400 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 123:.\nrf24.c     **** }
 401              		.loc 1 123 0
 402 0024 1846     		mov	r0, r3
 403 0026 0837     		adds	r7, r7, #8
 404              		.cfi_def_cfa_offset 8
 405 0028 BD46     		mov	sp, r7
 406              		.cfi_def_cfa_register 13
 407              		@ sp needed
 408 002a 80BD     		pop	{r7, pc}
 409              		.cfi_endproc
 410              	.LFE70:
 411              		.size	nrf24_payloadLength, .-nrf24_payloadLength
 412              		.section	.text.nrf24_getData,"ax",%progbits
 413              		.align	2
 414              		.global	nrf24_getData
 415              		.thumb
 416              		.thumb_func
 417              		.type	nrf24_getData, %function
 418              	nrf24_getData:
 419              	.LFB71:
 124:.\nrf24.c     **** 
 125:.\nrf24.c     **** /* Reads payload bytes into data array */
 126:.\nrf24.c     **** void nrf24_getData(uint8_t* data) 
 127:.\nrf24.c     **** {
 420              		.loc 1 127 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 8
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424 0000 80B5     		push	{r7, lr}
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 0002 82B0     		sub	sp, sp, #8
 429              		.cfi_def_cfa_offset 16
 430 0004 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 432 0006 7860     		str	r0, [r7, #4]
 128:.\nrf24.c     ****     /* Pull down chip select */
 129:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);                               
 433              		.loc 1 129 0
 434 0008 0020     		movs	r0, #0
 435 000a FFF7FEFF 		bl	nrf24_csn_digitalWrite
 130:.\nrf24.c     **** 
 131:.\nrf24.c     ****     /* Send cmd to read rx payload */
 132:.\nrf24.c     ****     spi_transfer( R_RX_PAYLOAD );
 436              		.loc 1 132 0
 437 000e 6120     		movs	r0, #97
 438 0010 FFF7FEFF 		bl	spi_transfer
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 11


 133:.\nrf24.c     ****     
 134:.\nrf24.c     ****     /* Read payload */
 135:.\nrf24.c     ****     nrf24_transferSync(data,data,payload_len);
 439              		.loc 1 135 0
 440 0014 084B     		ldr	r3, .L19
 441 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 442 0018 7868     		ldr	r0, [r7, #4]
 443 001a 7968     		ldr	r1, [r7, #4]
 444 001c 1A46     		mov	r2, r3
 445 001e FFF7FEFF 		bl	nrf24_transferSync
 136:.\nrf24.c     ****     
 137:.\nrf24.c     ****     /* Pull up chip select */
 138:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 446              		.loc 1 138 0
 447 0022 0120     		movs	r0, #1
 448 0024 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 139:.\nrf24.c     **** 
 140:.\nrf24.c     ****     /* Reset status register */
 141:.\nrf24.c     ****     nrf24_configRegister(STATUS,(1<<RX_DR));   
 449              		.loc 1 141 0
 450 0028 0720     		movs	r0, #7
 451 002a 4021     		movs	r1, #64
 452 002c FFF7FEFF 		bl	nrf24_configRegister
 142:.\nrf24.c     **** }
 453              		.loc 1 142 0
 454 0030 0837     		adds	r7, r7, #8
 455              		.cfi_def_cfa_offset 8
 456 0032 BD46     		mov	sp, r7
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 0034 80BD     		pop	{r7, pc}
 460              	.L20:
 461 0036 00BF     		.align	2
 462              	.L19:
 463 0038 00000000 		.word	payload_len
 464              		.cfi_endproc
 465              	.LFE71:
 466              		.size	nrf24_getData, .-nrf24_getData
 467              		.section	.text.nrf24_retransmissionCount,"ax",%progbits
 468              		.align	2
 469              		.global	nrf24_retransmissionCount
 470              		.thumb
 471              		.thumb_func
 472              		.type	nrf24_retransmissionCount, %function
 473              	nrf24_retransmissionCount:
 474              	.LFB72:
 143:.\nrf24.c     **** 
 144:.\nrf24.c     **** /* Returns the number of retransmissions occured for the last message */
 145:.\nrf24.c     **** uint8_t nrf24_retransmissionCount()
 146:.\nrf24.c     **** {
 475              		.loc 1 146 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 8
 478              		@ frame_needed = 1, uses_anonymous_args = 0
 479 0000 80B5     		push	{r7, lr}
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 7, -8
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 12


 482              		.cfi_offset 14, -4
 483 0002 82B0     		sub	sp, sp, #8
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              		.cfi_def_cfa_register 7
 147:.\nrf24.c     ****     uint8_t rv;
 148:.\nrf24.c     ****     nrf24_readRegister(OBSERVE_TX,&rv,1);
 487              		.loc 1 148 0
 488 0006 FB1D     		adds	r3, r7, #7
 489 0008 0820     		movs	r0, #8
 490 000a 1946     		mov	r1, r3
 491 000c 0122     		movs	r2, #1
 492 000e FFF7FEFF 		bl	nrf24_readRegister
 149:.\nrf24.c     ****     rv = rv & 0x0F;
 493              		.loc 1 149 0
 494 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 495 0014 03F00F03 		and	r3, r3, #15
 496 0018 DBB2     		uxtb	r3, r3
 497 001a FB71     		strb	r3, [r7, #7]
 150:.\nrf24.c     ****     return rv;
 498              		.loc 1 150 0
 499 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 151:.\nrf24.c     **** }
 500              		.loc 1 151 0
 501 001e 1846     		mov	r0, r3
 502 0020 0837     		adds	r7, r7, #8
 503              		.cfi_def_cfa_offset 8
 504 0022 BD46     		mov	sp, r7
 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 0024 80BD     		pop	{r7, pc}
 508              		.cfi_endproc
 509              	.LFE72:
 510              		.size	nrf24_retransmissionCount, .-nrf24_retransmissionCount
 511 0026 00BF     		.section	.text.nrf24_send,"ax",%progbits
 512              		.align	2
 513              		.global	nrf24_send
 514              		.thumb
 515              		.thumb_func
 516              		.type	nrf24_send, %function
 517              	nrf24_send:
 518              	.LFB73:
 152:.\nrf24.c     **** 
 153:.\nrf24.c     **** // Sends a data package to the default address. Be sure to send the correct
 154:.\nrf24.c     **** // amount of bytes as configured as payload on the receiver.
 155:.\nrf24.c     **** void nrf24_send(uint8_t* value) 
 156:.\nrf24.c     **** {    
 519              		.loc 1 156 0
 520              		.cfi_startproc
 521              		@ args = 0, pretend = 0, frame = 8
 522              		@ frame_needed = 1, uses_anonymous_args = 0
 523 0000 80B5     		push	{r7, lr}
 524              		.cfi_def_cfa_offset 8
 525              		.cfi_offset 7, -8
 526              		.cfi_offset 14, -4
 527 0002 82B0     		sub	sp, sp, #8
 528              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 13


 529 0004 00AF     		add	r7, sp, #0
 530              		.cfi_def_cfa_register 7
 531 0006 7860     		str	r0, [r7, #4]
 157:.\nrf24.c     ****     /* Go to Standby-I first */
 158:.\nrf24.c     ****     nrf24_ce_digitalWrite(LOW);
 532              		.loc 1 158 0
 533 0008 0020     		movs	r0, #0
 534 000a FFF7FEFF 		bl	nrf24_ce_digitalWrite
 159:.\nrf24.c     ****      
 160:.\nrf24.c     ****     /* Set to transmitter mode , Power up if needed */
 161:.\nrf24.c     ****     nrf24_powerUpTx();
 535              		.loc 1 161 0
 536 000e FFF7FEFF 		bl	nrf24_powerUpTx
 162:.\nrf24.c     **** 
 163:.\nrf24.c     ****     /* Do we really need to flush TX fifo each time ? */
 164:.\nrf24.c     ****     #if 1
 165:.\nrf24.c     ****         /* Pull down chip select */
 166:.\nrf24.c     ****         nrf24_csn_digitalWrite(LOW);           
 537              		.loc 1 166 0
 538 0012 0020     		movs	r0, #0
 539 0014 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 167:.\nrf24.c     **** 
 168:.\nrf24.c     ****         /* Write cmd to flush transmit FIFO */
 169:.\nrf24.c     ****         spi_transfer(FLUSH_TX);     
 540              		.loc 1 169 0
 541 0018 E120     		movs	r0, #225
 542 001a FFF7FEFF 		bl	spi_transfer
 170:.\nrf24.c     **** 
 171:.\nrf24.c     ****         /* Pull up chip select */
 172:.\nrf24.c     ****         nrf24_csn_digitalWrite(HIGH);                    
 543              		.loc 1 172 0
 544 001e 0120     		movs	r0, #1
 545 0020 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 173:.\nrf24.c     ****     #endif 
 174:.\nrf24.c     **** 
 175:.\nrf24.c     ****     /* Pull down chip select */
 176:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 546              		.loc 1 176 0
 547 0024 0020     		movs	r0, #0
 548 0026 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 177:.\nrf24.c     **** 
 178:.\nrf24.c     ****     /* Write cmd to write payload */
 179:.\nrf24.c     ****     spi_transfer(W_TX_PAYLOAD);
 549              		.loc 1 179 0
 550 002a A020     		movs	r0, #160
 551 002c FFF7FEFF 		bl	spi_transfer
 180:.\nrf24.c     **** 
 181:.\nrf24.c     ****     /* Write payload */
 182:.\nrf24.c     ****     nrf24_transmitSync(value,payload_len);   
 552              		.loc 1 182 0
 553 0030 074B     		ldr	r3, .L24
 554 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 555 0034 7868     		ldr	r0, [r7, #4]
 556 0036 1946     		mov	r1, r3
 557 0038 FFF7FEFF 		bl	nrf24_transmitSync
 183:.\nrf24.c     **** 
 184:.\nrf24.c     ****     /* Pull up chip select */
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 14


 185:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 558              		.loc 1 185 0
 559 003c 0120     		movs	r0, #1
 560 003e FFF7FEFF 		bl	nrf24_csn_digitalWrite
 186:.\nrf24.c     **** 
 187:.\nrf24.c     ****     /* Start the transmission */
 188:.\nrf24.c     ****     nrf24_ce_digitalWrite(HIGH);    
 561              		.loc 1 188 0
 562 0042 0120     		movs	r0, #1
 563 0044 FFF7FEFF 		bl	nrf24_ce_digitalWrite
 189:.\nrf24.c     **** }
 564              		.loc 1 189 0
 565 0048 0837     		adds	r7, r7, #8
 566              		.cfi_def_cfa_offset 8
 567 004a BD46     		mov	sp, r7
 568              		.cfi_def_cfa_register 13
 569              		@ sp needed
 570 004c 80BD     		pop	{r7, pc}
 571              	.L25:
 572 004e 00BF     		.align	2
 573              	.L24:
 574 0050 00000000 		.word	payload_len
 575              		.cfi_endproc
 576              	.LFE73:
 577              		.size	nrf24_send, .-nrf24_send
 578              		.section	.text.nrf24_isSending,"ax",%progbits
 579              		.align	2
 580              		.global	nrf24_isSending
 581              		.thumb
 582              		.thumb_func
 583              		.type	nrf24_isSending, %function
 584              	nrf24_isSending:
 585              	.LFB74:
 190:.\nrf24.c     **** 
 191:.\nrf24.c     **** uint8_t nrf24_isSending()
 192:.\nrf24.c     **** {
 586              		.loc 1 192 0
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 8
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590 0000 80B5     		push	{r7, lr}
 591              		.cfi_def_cfa_offset 8
 592              		.cfi_offset 7, -8
 593              		.cfi_offset 14, -4
 594 0002 82B0     		sub	sp, sp, #8
 595              		.cfi_def_cfa_offset 16
 596 0004 00AF     		add	r7, sp, #0
 597              		.cfi_def_cfa_register 7
 193:.\nrf24.c     ****     uint8_t status;
 194:.\nrf24.c     **** 
 195:.\nrf24.c     ****     /* read the current status */
 196:.\nrf24.c     ****     status = nrf24_getStatus();
 598              		.loc 1 196 0
 599 0006 FFF7FEFF 		bl	nrf24_getStatus
 600 000a 0346     		mov	r3, r0
 601 000c FB71     		strb	r3, [r7, #7]
 197:.\nrf24.c     ****                 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 15


 198:.\nrf24.c     ****     /* if sending successful (TX_DS) or max retries exceded (MAX_RT). */
 199:.\nrf24.c     ****     if((status & ((1 << TX_DS)  | (1 << MAX_RT))))
 602              		.loc 1 199 0
 603 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 604 0010 03F03003 		and	r3, r3, #48
 605 0014 002B     		cmp	r3, #0
 606 0016 01D0     		beq	.L27
 200:.\nrf24.c     ****     {        
 201:.\nrf24.c     ****         return 0; /* false */
 607              		.loc 1 201 0
 608 0018 0023     		movs	r3, #0
 609 001a 00E0     		b	.L28
 610              	.L27:
 202:.\nrf24.c     ****     }
 203:.\nrf24.c     **** 
 204:.\nrf24.c     ****     return 1; /* true */
 611              		.loc 1 204 0
 612 001c 0123     		movs	r3, #1
 613              	.L28:
 205:.\nrf24.c     **** 
 206:.\nrf24.c     **** }
 614              		.loc 1 206 0
 615 001e 1846     		mov	r0, r3
 616 0020 0837     		adds	r7, r7, #8
 617              		.cfi_def_cfa_offset 8
 618 0022 BD46     		mov	sp, r7
 619              		.cfi_def_cfa_register 13
 620              		@ sp needed
 621 0024 80BD     		pop	{r7, pc}
 622              		.cfi_endproc
 623              	.LFE74:
 624              		.size	nrf24_isSending, .-nrf24_isSending
 625 0026 00BF     		.section	.text.nrf24_getStatus,"ax",%progbits
 626              		.align	2
 627              		.global	nrf24_getStatus
 628              		.thumb
 629              		.thumb_func
 630              		.type	nrf24_getStatus, %function
 631              	nrf24_getStatus:
 632              	.LFB75:
 207:.\nrf24.c     **** 
 208:.\nrf24.c     **** uint8_t nrf24_getStatus()
 209:.\nrf24.c     **** {
 633              		.loc 1 209 0
 634              		.cfi_startproc
 635              		@ args = 0, pretend = 0, frame = 8
 636              		@ frame_needed = 1, uses_anonymous_args = 0
 637 0000 80B5     		push	{r7, lr}
 638              		.cfi_def_cfa_offset 8
 639              		.cfi_offset 7, -8
 640              		.cfi_offset 14, -4
 641 0002 82B0     		sub	sp, sp, #8
 642              		.cfi_def_cfa_offset 16
 643 0004 00AF     		add	r7, sp, #0
 644              		.cfi_def_cfa_register 7
 210:.\nrf24.c     ****     uint8_t rv;
 211:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 16


 645              		.loc 1 211 0
 646 0006 0020     		movs	r0, #0
 647 0008 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 212:.\nrf24.c     ****     rv = spi_transfer(NOP);
 648              		.loc 1 212 0
 649 000c FF20     		movs	r0, #255
 650 000e FFF7FEFF 		bl	spi_transfer
 651 0012 0346     		mov	r3, r0
 652 0014 FB71     		strb	r3, [r7, #7]
 213:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 653              		.loc 1 213 0
 654 0016 0120     		movs	r0, #1
 655 0018 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 214:.\nrf24.c     ****     return rv;
 656              		.loc 1 214 0
 657 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 215:.\nrf24.c     **** }
 658              		.loc 1 215 0
 659 001e 1846     		mov	r0, r3
 660 0020 0837     		adds	r7, r7, #8
 661              		.cfi_def_cfa_offset 8
 662 0022 BD46     		mov	sp, r7
 663              		.cfi_def_cfa_register 13
 664              		@ sp needed
 665 0024 80BD     		pop	{r7, pc}
 666              		.cfi_endproc
 667              	.LFE75:
 668              		.size	nrf24_getStatus, .-nrf24_getStatus
 669 0026 00BF     		.section	.text.nrf24_lastMessageStatus,"ax",%progbits
 670              		.align	2
 671              		.global	nrf24_lastMessageStatus
 672              		.thumb
 673              		.thumb_func
 674              		.type	nrf24_lastMessageStatus, %function
 675              	nrf24_lastMessageStatus:
 676              	.LFB76:
 216:.\nrf24.c     **** 
 217:.\nrf24.c     **** uint8_t nrf24_lastMessageStatus()
 218:.\nrf24.c     **** {
 677              		.loc 1 218 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 8
 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 80B5     		push	{r7, lr}
 682              		.cfi_def_cfa_offset 8
 683              		.cfi_offset 7, -8
 684              		.cfi_offset 14, -4
 685 0002 82B0     		sub	sp, sp, #8
 686              		.cfi_def_cfa_offset 16
 687 0004 00AF     		add	r7, sp, #0
 688              		.cfi_def_cfa_register 7
 219:.\nrf24.c     ****     uint8_t rv;
 220:.\nrf24.c     **** 
 221:.\nrf24.c     ****     rv = nrf24_getStatus();
 689              		.loc 1 221 0
 690 0006 FFF7FEFF 		bl	nrf24_getStatus
 691 000a 0346     		mov	r3, r0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 17


 692 000c FB71     		strb	r3, [r7, #7]
 222:.\nrf24.c     **** 
 223:.\nrf24.c     ****     /* Transmission went OK */
 224:.\nrf24.c     ****     if((rv & ((1 << TX_DS))))
 693              		.loc 1 224 0
 694 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 695 0010 03F02003 		and	r3, r3, #32
 696 0014 002B     		cmp	r3, #0
 697 0016 01D0     		beq	.L32
 225:.\nrf24.c     ****     {
 226:.\nrf24.c     ****         return NRF24_TRANSMISSON_OK;
 698              		.loc 1 226 0
 699 0018 0023     		movs	r3, #0
 700 001a 07E0     		b	.L33
 701              	.L32:
 227:.\nrf24.c     ****     }
 228:.\nrf24.c     ****     /* Maximum retransmission count is reached */
 229:.\nrf24.c     ****     /* Last message probably went missing ... */
 230:.\nrf24.c     ****     else if((rv & ((1 << MAX_RT))))
 702              		.loc 1 230 0
 703 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 704 001e 03F01003 		and	r3, r3, #16
 705 0022 002B     		cmp	r3, #0
 706 0024 01D0     		beq	.L34
 231:.\nrf24.c     ****     {
 232:.\nrf24.c     ****         return NRF24_MESSAGE_LOST;
 707              		.loc 1 232 0
 708 0026 0123     		movs	r3, #1
 709 0028 00E0     		b	.L33
 710              	.L34:
 233:.\nrf24.c     ****     }  
 234:.\nrf24.c     ****     /* Probably still sending ... */
 235:.\nrf24.c     ****     else
 236:.\nrf24.c     ****     {
 237:.\nrf24.c     ****         return 0xFF;
 711              		.loc 1 237 0
 712 002a FF23     		movs	r3, #255
 713              	.L33:
 238:.\nrf24.c     ****     }
 239:.\nrf24.c     **** }
 714              		.loc 1 239 0
 715 002c 1846     		mov	r0, r3
 716 002e 0837     		adds	r7, r7, #8
 717              		.cfi_def_cfa_offset 8
 718 0030 BD46     		mov	sp, r7
 719              		.cfi_def_cfa_register 13
 720              		@ sp needed
 721 0032 80BD     		pop	{r7, pc}
 722              		.cfi_endproc
 723              	.LFE76:
 724              		.size	nrf24_lastMessageStatus, .-nrf24_lastMessageStatus
 725              		.section	.text.nrf24_powerUpRx,"ax",%progbits
 726              		.align	2
 727              		.global	nrf24_powerUpRx
 728              		.thumb
 729              		.thumb_func
 730              		.type	nrf24_powerUpRx, %function
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 18


 731              	nrf24_powerUpRx:
 732              	.LFB77:
 240:.\nrf24.c     **** 
 241:.\nrf24.c     **** void nrf24_powerUpRx()
 242:.\nrf24.c     **** {     
 733              		.loc 1 242 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 1, uses_anonymous_args = 0
 737 0000 80B5     		push	{r7, lr}
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 7, -8
 740              		.cfi_offset 14, -4
 741 0002 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 243:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 743              		.loc 1 243 0
 744 0004 0020     		movs	r0, #0
 745 0006 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 244:.\nrf24.c     ****     spi_transfer(FLUSH_RX);
 746              		.loc 1 244 0
 747 000a E220     		movs	r0, #226
 748 000c FFF7FEFF 		bl	spi_transfer
 245:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 749              		.loc 1 245 0
 750 0010 0120     		movs	r0, #1
 751 0012 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 246:.\nrf24.c     **** 
 247:.\nrf24.c     ****     nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 752              		.loc 1 247 0
 753 0016 0720     		movs	r0, #7
 754 0018 7021     		movs	r1, #112
 755 001a FFF7FEFF 		bl	nrf24_configRegister
 248:.\nrf24.c     **** 
 249:.\nrf24.c     ****     nrf24_ce_digitalWrite(LOW);    
 756              		.loc 1 249 0
 757 001e 0020     		movs	r0, #0
 758 0020 FFF7FEFF 		bl	nrf24_ce_digitalWrite
 250:.\nrf24.c     ****     nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(1<<PRIM_RX)));    
 759              		.loc 1 250 0
 760 0024 0020     		movs	r0, #0
 761 0026 0B21     		movs	r1, #11
 762 0028 FFF7FEFF 		bl	nrf24_configRegister
 251:.\nrf24.c     ****     nrf24_ce_digitalWrite(HIGH);
 763              		.loc 1 251 0
 764 002c 0120     		movs	r0, #1
 765 002e FFF7FEFF 		bl	nrf24_ce_digitalWrite
 252:.\nrf24.c     **** }
 766              		.loc 1 252 0
 767 0032 80BD     		pop	{r7, pc}
 768              		.cfi_endproc
 769              	.LFE77:
 770              		.size	nrf24_powerUpRx, .-nrf24_powerUpRx
 771              		.section	.text.nrf24_powerUpTx,"ax",%progbits
 772              		.align	2
 773              		.global	nrf24_powerUpTx
 774              		.thumb
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 19


 775              		.thumb_func
 776              		.type	nrf24_powerUpTx, %function
 777              	nrf24_powerUpTx:
 778              	.LFB78:
 253:.\nrf24.c     **** 
 254:.\nrf24.c     **** void nrf24_powerUpTx()
 255:.\nrf24.c     **** {
 779              		.loc 1 255 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 1, uses_anonymous_args = 0
 783 0000 80B5     		push	{r7, lr}
 784              		.cfi_def_cfa_offset 8
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 00AF     		add	r7, sp, #0
 788              		.cfi_def_cfa_register 7
 256:.\nrf24.c     ****     nrf24_configRegister(STATUS,(1<<RX_DR)|(1<<TX_DS)|(1<<MAX_RT)); 
 789              		.loc 1 256 0
 790 0004 0720     		movs	r0, #7
 791 0006 7021     		movs	r1, #112
 792 0008 FFF7FEFF 		bl	nrf24_configRegister
 257:.\nrf24.c     **** 
 258:.\nrf24.c     ****     nrf24_configRegister(CONFIG,nrf24_CONFIG|((1<<PWR_UP)|(0<<PRIM_RX)));
 793              		.loc 1 258 0
 794 000c 0020     		movs	r0, #0
 795 000e 0A21     		movs	r1, #10
 796 0010 FFF7FEFF 		bl	nrf24_configRegister
 259:.\nrf24.c     **** }
 797              		.loc 1 259 0
 798 0014 80BD     		pop	{r7, pc}
 799              		.cfi_endproc
 800              	.LFE78:
 801              		.size	nrf24_powerUpTx, .-nrf24_powerUpTx
 802 0016 00BF     		.section	.text.nrf24_powerDown,"ax",%progbits
 803              		.align	2
 804              		.global	nrf24_powerDown
 805              		.thumb
 806              		.thumb_func
 807              		.type	nrf24_powerDown, %function
 808              	nrf24_powerDown:
 809              	.LFB79:
 260:.\nrf24.c     **** 
 261:.\nrf24.c     **** void nrf24_powerDown()
 262:.\nrf24.c     **** {
 810              		.loc 1 262 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 0
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814 0000 80B5     		push	{r7, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 00AF     		add	r7, sp, #0
 819              		.cfi_def_cfa_register 7
 263:.\nrf24.c     ****     nrf24_ce_digitalWrite(LOW);
 820              		.loc 1 263 0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 20


 821 0004 0020     		movs	r0, #0
 822 0006 FFF7FEFF 		bl	nrf24_ce_digitalWrite
 264:.\nrf24.c     ****     nrf24_configRegister(CONFIG,nrf24_CONFIG);
 823              		.loc 1 264 0
 824 000a 0020     		movs	r0, #0
 825 000c 0821     		movs	r1, #8
 826 000e FFF7FEFF 		bl	nrf24_configRegister
 265:.\nrf24.c     **** }
 827              		.loc 1 265 0
 828 0012 80BD     		pop	{r7, pc}
 829              		.cfi_endproc
 830              	.LFE79:
 831              		.size	nrf24_powerDown, .-nrf24_powerDown
 832              		.section	.text.spi_transfer,"ax",%progbits
 833              		.align	2
 834              		.global	spi_transfer
 835              		.thumb
 836              		.thumb_func
 837              		.type	spi_transfer, %function
 838              	spi_transfer:
 839              	.LFB80:
 266:.\nrf24.c     **** 
 267:.\nrf24.c     **** /* software spi routine */
 268:.\nrf24.c     **** uint8_t spi_transfer(uint8_t tx)
 269:.\nrf24.c     **** {
 840              		.loc 1 269 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 16
 843              		@ frame_needed = 1, uses_anonymous_args = 0
 844 0000 80B5     		push	{r7, lr}
 845              		.cfi_def_cfa_offset 8
 846              		.cfi_offset 7, -8
 847              		.cfi_offset 14, -4
 848 0002 84B0     		sub	sp, sp, #16
 849              		.cfi_def_cfa_offset 24
 850 0004 00AF     		add	r7, sp, #0
 851              		.cfi_def_cfa_register 7
 852 0006 0346     		mov	r3, r0
 853 0008 FB71     		strb	r3, [r7, #7]
 270:.\nrf24.c     ****     uint8_t i = 0;
 854              		.loc 1 270 0
 855 000a 0023     		movs	r3, #0
 856 000c FB73     		strb	r3, [r7, #15]
 271:.\nrf24.c     ****     uint8_t rx = 0;    
 857              		.loc 1 271 0
 858 000e 0023     		movs	r3, #0
 859 0010 BB73     		strb	r3, [r7, #14]
 272:.\nrf24.c     **** 
 273:.\nrf24.c     ****     nrf24_sck_digitalWrite(LOW);
 860              		.loc 1 273 0
 861 0012 0020     		movs	r0, #0
 862 0014 FFF7FEFF 		bl	nrf24_sck_digitalWrite
 274:.\nrf24.c     **** 
 275:.\nrf24.c     ****     for(i=0;i<8;i++)
 863              		.loc 1 275 0
 864 0018 0023     		movs	r3, #0
 865 001a FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 21


 866 001c 25E0     		b	.L39
 867              	.L43:
 276:.\nrf24.c     ****     {
 277:.\nrf24.c     **** 
 278:.\nrf24.c     ****         if(tx & (1<<(7-i)))
 868              		.loc 1 278 0
 869 001e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 870 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 871 0022 C3F10703 		rsb	r3, r3, #7
 872 0026 42FA03F3 		asr	r3, r2, r3
 873 002a 03F00103 		and	r3, r3, #1
 874 002e 002B     		cmp	r3, #0
 875 0030 03D0     		beq	.L40
 279:.\nrf24.c     ****         {
 280:.\nrf24.c     ****             nrf24_mosi_digitalWrite(HIGH);            
 876              		.loc 1 280 0
 877 0032 0120     		movs	r0, #1
 878 0034 FFF7FEFF 		bl	nrf24_mosi_digitalWrite
 879 0038 02E0     		b	.L41
 880              	.L40:
 281:.\nrf24.c     ****         }
 282:.\nrf24.c     ****         else
 283:.\nrf24.c     ****         {
 284:.\nrf24.c     ****             nrf24_mosi_digitalWrite(LOW);
 881              		.loc 1 284 0
 882 003a 0020     		movs	r0, #0
 883 003c FFF7FEFF 		bl	nrf24_mosi_digitalWrite
 884              	.L41:
 285:.\nrf24.c     ****         }
 286:.\nrf24.c     **** 
 287:.\nrf24.c     ****         nrf24_sck_digitalWrite(HIGH);        
 885              		.loc 1 287 0
 886 0040 0120     		movs	r0, #1
 887 0042 FFF7FEFF 		bl	nrf24_sck_digitalWrite
 288:.\nrf24.c     **** 
 289:.\nrf24.c     ****         rx = rx << 1;
 888              		.loc 1 289 0
 889 0046 BB7B     		ldrb	r3, [r7, #14]
 890 0048 5B00     		lsls	r3, r3, #1
 891 004a BB73     		strb	r3, [r7, #14]
 290:.\nrf24.c     ****         if(nrf24_miso_digitalRead())
 892              		.loc 1 290 0
 893 004c FFF7FEFF 		bl	nrf24_miso_digitalRead
 894 0050 0346     		mov	r3, r0
 895 0052 002B     		cmp	r3, #0
 896 0054 03D0     		beq	.L42
 291:.\nrf24.c     ****         {
 292:.\nrf24.c     ****             rx |= 0x01;
 897              		.loc 1 292 0
 898 0056 BB7B     		ldrb	r3, [r7, #14]
 899 0058 43F00103 		orr	r3, r3, #1
 900 005c BB73     		strb	r3, [r7, #14]
 901              	.L42:
 293:.\nrf24.c     ****         }
 294:.\nrf24.c     **** 
 295:.\nrf24.c     ****         nrf24_sck_digitalWrite(LOW);                
 902              		.loc 1 295 0 discriminator 2
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 22


 903 005e 0020     		movs	r0, #0
 904 0060 FFF7FEFF 		bl	nrf24_sck_digitalWrite
 275:.\nrf24.c     ****     {
 905              		.loc 1 275 0 discriminator 2
 906 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 907 0066 0133     		adds	r3, r3, #1
 908 0068 FB73     		strb	r3, [r7, #15]
 909              	.L39:
 275:.\nrf24.c     ****     {
 910              		.loc 1 275 0 is_stmt 0 discriminator 1
 911 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 912 006c 072B     		cmp	r3, #7
 913 006e D6D9     		bls	.L43
 296:.\nrf24.c     **** 
 297:.\nrf24.c     ****     }
 298:.\nrf24.c     **** 
 299:.\nrf24.c     ****     return rx;
 914              		.loc 1 299 0 is_stmt 1
 915 0070 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 300:.\nrf24.c     **** }
 916              		.loc 1 300 0
 917 0072 1846     		mov	r0, r3
 918 0074 1037     		adds	r7, r7, #16
 919              		.cfi_def_cfa_offset 8
 920 0076 BD46     		mov	sp, r7
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 0078 80BD     		pop	{r7, pc}
 924              		.cfi_endproc
 925              	.LFE80:
 926              		.size	spi_transfer, .-spi_transfer
 927 007a 00BF     		.section	.text.nrf24_transferSync,"ax",%progbits
 928              		.align	2
 929              		.global	nrf24_transferSync
 930              		.thumb
 931              		.thumb_func
 932              		.type	nrf24_transferSync, %function
 933              	nrf24_transferSync:
 934              	.LFB81:
 301:.\nrf24.c     **** 
 302:.\nrf24.c     **** /* send and receive multiple bytes over SPI */
 303:.\nrf24.c     **** void nrf24_transferSync(uint8_t* dataout,uint8_t* datain,uint8_t len)
 304:.\nrf24.c     **** {
 935              		.loc 1 304 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 24
 938              		@ frame_needed = 1, uses_anonymous_args = 0
 939 0000 90B5     		push	{r4, r7, lr}
 940              		.cfi_def_cfa_offset 12
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 7, -8
 943              		.cfi_offset 14, -4
 944 0002 87B0     		sub	sp, sp, #28
 945              		.cfi_def_cfa_offset 40
 946 0004 00AF     		add	r7, sp, #0
 947              		.cfi_def_cfa_register 7
 948 0006 F860     		str	r0, [r7, #12]
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 23


 949 0008 B960     		str	r1, [r7, #8]
 950 000a 1346     		mov	r3, r2
 951 000c FB71     		strb	r3, [r7, #7]
 305:.\nrf24.c     ****     uint8_t i;
 306:.\nrf24.c     **** 
 307:.\nrf24.c     ****     for(i=0;i<len;i++)
 952              		.loc 1 307 0
 953 000e 0023     		movs	r3, #0
 954 0010 FB75     		strb	r3, [r7, #23]
 955 0012 0EE0     		b	.L46
 956              	.L47:
 308:.\nrf24.c     ****     {
 309:.\nrf24.c     ****         datain[i] = spi_transfer(dataout[i]);
 957              		.loc 1 309 0 discriminator 3
 958 0014 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 959 0016 BA68     		ldr	r2, [r7, #8]
 960 0018 D418     		adds	r4, r2, r3
 961 001a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 962 001c FA68     		ldr	r2, [r7, #12]
 963 001e 1344     		add	r3, r3, r2
 964 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 965 0022 1846     		mov	r0, r3
 966 0024 FFF7FEFF 		bl	spi_transfer
 967 0028 0346     		mov	r3, r0
 968 002a 2370     		strb	r3, [r4]
 307:.\nrf24.c     ****     {
 969              		.loc 1 307 0 discriminator 3
 970 002c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 971 002e 0133     		adds	r3, r3, #1
 972 0030 FB75     		strb	r3, [r7, #23]
 973              	.L46:
 307:.\nrf24.c     ****     {
 974              		.loc 1 307 0 is_stmt 0 discriminator 1
 975 0032 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 976 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 977 0036 9A42     		cmp	r2, r3
 978 0038 ECD3     		bcc	.L47
 310:.\nrf24.c     ****     }
 311:.\nrf24.c     **** 
 312:.\nrf24.c     **** }
 979              		.loc 1 312 0 is_stmt 1
 980 003a 1C37     		adds	r7, r7, #28
 981              		.cfi_def_cfa_offset 12
 982 003c BD46     		mov	sp, r7
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 003e 90BD     		pop	{r4, r7, pc}
 986              		.cfi_endproc
 987              	.LFE81:
 988              		.size	nrf24_transferSync, .-nrf24_transferSync
 989              		.section	.text.nrf24_transmitSync,"ax",%progbits
 990              		.align	2
 991              		.global	nrf24_transmitSync
 992              		.thumb
 993              		.thumb_func
 994              		.type	nrf24_transmitSync, %function
 995              	nrf24_transmitSync:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 24


 996              	.LFB82:
 313:.\nrf24.c     **** 
 314:.\nrf24.c     **** /* send multiple bytes over SPI */
 315:.\nrf24.c     **** void nrf24_transmitSync(uint8_t* dataout,uint8_t len)
 316:.\nrf24.c     **** {
 997              		.loc 1 316 0
 998              		.cfi_startproc
 999              		@ args = 0, pretend = 0, frame = 16
 1000              		@ frame_needed = 1, uses_anonymous_args = 0
 1001 0000 80B5     		push	{r7, lr}
 1002              		.cfi_def_cfa_offset 8
 1003              		.cfi_offset 7, -8
 1004              		.cfi_offset 14, -4
 1005 0002 84B0     		sub	sp, sp, #16
 1006              		.cfi_def_cfa_offset 24
 1007 0004 00AF     		add	r7, sp, #0
 1008              		.cfi_def_cfa_register 7
 1009 0006 7860     		str	r0, [r7, #4]
 1010 0008 0B46     		mov	r3, r1
 1011 000a FB70     		strb	r3, [r7, #3]
 317:.\nrf24.c     ****     uint8_t i;
 318:.\nrf24.c     ****     
 319:.\nrf24.c     ****     for(i=0;i<len;i++)
 1012              		.loc 1 319 0
 1013 000c 0023     		movs	r3, #0
 1014 000e FB73     		strb	r3, [r7, #15]
 1015 0010 09E0     		b	.L49
 1016              	.L50:
 320:.\nrf24.c     ****     {
 321:.\nrf24.c     ****         spi_transfer(dataout[i]);
 1017              		.loc 1 321 0 discriminator 3
 1018 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1019 0014 7A68     		ldr	r2, [r7, #4]
 1020 0016 1344     		add	r3, r3, r2
 1021 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1022 001a 1846     		mov	r0, r3
 1023 001c FFF7FEFF 		bl	spi_transfer
 319:.\nrf24.c     ****     {
 1024              		.loc 1 319 0 discriminator 3
 1025 0020 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1026 0022 0133     		adds	r3, r3, #1
 1027 0024 FB73     		strb	r3, [r7, #15]
 1028              	.L49:
 319:.\nrf24.c     ****     {
 1029              		.loc 1 319 0 is_stmt 0 discriminator 1
 1030 0026 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1031 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1032 002a 9A42     		cmp	r2, r3
 1033 002c F1D3     		bcc	.L50
 322:.\nrf24.c     ****     }
 323:.\nrf24.c     **** 
 324:.\nrf24.c     **** }
 1034              		.loc 1 324 0 is_stmt 1
 1035 002e 1037     		adds	r7, r7, #16
 1036              		.cfi_def_cfa_offset 8
 1037 0030 BD46     		mov	sp, r7
 1038              		.cfi_def_cfa_register 13
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 25


 1039              		@ sp needed
 1040 0032 80BD     		pop	{r7, pc}
 1041              		.cfi_endproc
 1042              	.LFE82:
 1043              		.size	nrf24_transmitSync, .-nrf24_transmitSync
 1044              		.section	.text.nrf24_configRegister,"ax",%progbits
 1045              		.align	2
 1046              		.global	nrf24_configRegister
 1047              		.thumb
 1048              		.thumb_func
 1049              		.type	nrf24_configRegister, %function
 1050              	nrf24_configRegister:
 1051              	.LFB83:
 325:.\nrf24.c     **** 
 326:.\nrf24.c     **** /* Clocks only one byte into the given nrf24 register */
 327:.\nrf24.c     **** void nrf24_configRegister(uint8_t reg, uint8_t value)
 328:.\nrf24.c     **** {
 1052              		.loc 1 328 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 80B5     		push	{r7, lr}
 1057              		.cfi_def_cfa_offset 8
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 82B0     		sub	sp, sp, #8
 1061              		.cfi_def_cfa_offset 16
 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 1064 0006 0346     		mov	r3, r0
 1065 0008 0A46     		mov	r2, r1
 1066 000a FB71     		strb	r3, [r7, #7]
 1067 000c 1346     		mov	r3, r2
 1068 000e BB71     		strb	r3, [r7, #6]
 329:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 1069              		.loc 1 329 0
 1070 0010 0020     		movs	r0, #0
 1071 0012 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 330:.\nrf24.c     ****     spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 1072              		.loc 1 330 0
 1073 0016 FB79     		ldrb	r3, [r7, #7]
 1074 0018 03F01F03 		and	r3, r3, #31
 1075 001c DBB2     		uxtb	r3, r3
 1076 001e 43F02003 		orr	r3, r3, #32
 1077 0022 DBB2     		uxtb	r3, r3
 1078 0024 1846     		mov	r0, r3
 1079 0026 FFF7FEFF 		bl	spi_transfer
 331:.\nrf24.c     ****     spi_transfer(value);
 1080              		.loc 1 331 0
 1081 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1082 002c 1846     		mov	r0, r3
 1083 002e FFF7FEFF 		bl	spi_transfer
 332:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 1084              		.loc 1 332 0
 1085 0032 0120     		movs	r0, #1
 1086 0034 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 333:.\nrf24.c     **** }
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 26


 1087              		.loc 1 333 0
 1088 0038 0837     		adds	r7, r7, #8
 1089              		.cfi_def_cfa_offset 8
 1090 003a BD46     		mov	sp, r7
 1091              		.cfi_def_cfa_register 13
 1092              		@ sp needed
 1093 003c 80BD     		pop	{r7, pc}
 1094              		.cfi_endproc
 1095              	.LFE83:
 1096              		.size	nrf24_configRegister, .-nrf24_configRegister
 1097 003e 00BF     		.section	.text.nrf24_readRegister,"ax",%progbits
 1098              		.align	2
 1099              		.global	nrf24_readRegister
 1100              		.thumb
 1101              		.thumb_func
 1102              		.type	nrf24_readRegister, %function
 1103              	nrf24_readRegister:
 1104              	.LFB84:
 334:.\nrf24.c     **** 
 335:.\nrf24.c     **** /* Read single register from nrf24 */
 336:.\nrf24.c     **** void nrf24_readRegister(uint8_t reg, uint8_t* value, uint8_t len)
 337:.\nrf24.c     **** {
 1105              		.loc 1 337 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 8
 1108              		@ frame_needed = 1, uses_anonymous_args = 0
 1109 0000 80B5     		push	{r7, lr}
 1110              		.cfi_def_cfa_offset 8
 1111              		.cfi_offset 7, -8
 1112              		.cfi_offset 14, -4
 1113 0002 82B0     		sub	sp, sp, #8
 1114              		.cfi_def_cfa_offset 16
 1115 0004 00AF     		add	r7, sp, #0
 1116              		.cfi_def_cfa_register 7
 1117 0006 0346     		mov	r3, r0
 1118 0008 3960     		str	r1, [r7]
 1119 000a FB71     		strb	r3, [r7, #7]
 1120 000c 1346     		mov	r3, r2
 1121 000e BB71     		strb	r3, [r7, #6]
 338:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 1122              		.loc 1 338 0
 1123 0010 0020     		movs	r0, #0
 1124 0012 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 339:.\nrf24.c     ****     spi_transfer(R_REGISTER | (REGISTER_MASK & reg));
 1125              		.loc 1 339 0
 1126 0016 FB79     		ldrb	r3, [r7, #7]
 1127 0018 03F01F03 		and	r3, r3, #31
 1128 001c DBB2     		uxtb	r3, r3
 1129 001e 1846     		mov	r0, r3
 1130 0020 FFF7FEFF 		bl	spi_transfer
 340:.\nrf24.c     ****     nrf24_transferSync(value,value,len);
 1131              		.loc 1 340 0
 1132 0024 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1133 0026 3868     		ldr	r0, [r7]
 1134 0028 3968     		ldr	r1, [r7]
 1135 002a 1A46     		mov	r2, r3
 1136 002c FFF7FEFF 		bl	nrf24_transferSync
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 27


 341:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 1137              		.loc 1 341 0
 1138 0030 0120     		movs	r0, #1
 1139 0032 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 342:.\nrf24.c     **** }
 1140              		.loc 1 342 0
 1141 0036 0837     		adds	r7, r7, #8
 1142              		.cfi_def_cfa_offset 8
 1143 0038 BD46     		mov	sp, r7
 1144              		.cfi_def_cfa_register 13
 1145              		@ sp needed
 1146 003a 80BD     		pop	{r7, pc}
 1147              		.cfi_endproc
 1148              	.LFE84:
 1149              		.size	nrf24_readRegister, .-nrf24_readRegister
 1150              		.section	.text.nrf24_writeRegister,"ax",%progbits
 1151              		.align	2
 1152              		.global	nrf24_writeRegister
 1153              		.thumb
 1154              		.thumb_func
 1155              		.type	nrf24_writeRegister, %function
 1156              	nrf24_writeRegister:
 1157              	.LFB85:
 343:.\nrf24.c     **** 
 344:.\nrf24.c     **** /* Write to a single register of nrf24 */
 345:.\nrf24.c     **** void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
 346:.\nrf24.c     **** {
 1158              		.loc 1 346 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 8
 1161              		@ frame_needed = 1, uses_anonymous_args = 0
 1162 0000 80B5     		push	{r7, lr}
 1163              		.cfi_def_cfa_offset 8
 1164              		.cfi_offset 7, -8
 1165              		.cfi_offset 14, -4
 1166 0002 82B0     		sub	sp, sp, #8
 1167              		.cfi_def_cfa_offset 16
 1168 0004 00AF     		add	r7, sp, #0
 1169              		.cfi_def_cfa_register 7
 1170 0006 0346     		mov	r3, r0
 1171 0008 3960     		str	r1, [r7]
 1172 000a FB71     		strb	r3, [r7, #7]
 1173 000c 1346     		mov	r3, r2
 1174 000e BB71     		strb	r3, [r7, #6]
 347:.\nrf24.c     ****     nrf24_csn_digitalWrite(LOW);
 1175              		.loc 1 347 0
 1176 0010 0020     		movs	r0, #0
 1177 0012 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 348:.\nrf24.c     ****     spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 1178              		.loc 1 348 0
 1179 0016 FB79     		ldrb	r3, [r7, #7]
 1180 0018 03F01F03 		and	r3, r3, #31
 1181 001c DBB2     		uxtb	r3, r3
 1182 001e 43F02003 		orr	r3, r3, #32
 1183 0022 DBB2     		uxtb	r3, r3
 1184 0024 1846     		mov	r0, r3
 1185 0026 FFF7FEFF 		bl	spi_transfer
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 28


 349:.\nrf24.c     ****     nrf24_transmitSync(value,len);
 1186              		.loc 1 349 0
 1187 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1188 002c 3868     		ldr	r0, [r7]
 1189 002e 1946     		mov	r1, r3
 1190 0030 FFF7FEFF 		bl	nrf24_transmitSync
 350:.\nrf24.c     ****     nrf24_csn_digitalWrite(HIGH);
 1191              		.loc 1 350 0
 1192 0034 0120     		movs	r0, #1
 1193 0036 FFF7FEFF 		bl	nrf24_csn_digitalWrite
 351:.\nrf24.c     **** }
 1194              		.loc 1 351 0
 1195 003a 0837     		adds	r7, r7, #8
 1196              		.cfi_def_cfa_offset 8
 1197 003c BD46     		mov	sp, r7
 1198              		.cfi_def_cfa_register 13
 1199              		@ sp needed
 1200 003e 80BD     		pop	{r7, pc}
 1201              		.cfi_endproc
 1202              	.LFE85:
 1203              		.size	nrf24_writeRegister, .-nrf24_writeRegister
 1204              		.section	.text.nrf24_ce_digitalWrite,"ax",%progbits
 1205              		.align	2
 1206              		.global	nrf24_ce_digitalWrite
 1207              		.thumb
 1208              		.thumb_func
 1209              		.type	nrf24_ce_digitalWrite, %function
 1210              	nrf24_ce_digitalWrite:
 1211              	.LFB86:
 352:.\nrf24.c     **** 
 353:.\nrf24.c     **** //Hardware specific functions
 354:.\nrf24.c     **** void nrf24_ce_digitalWrite(uint8_t state)
 355:.\nrf24.c     **** {
 1212              		.loc 1 355 0
 1213              		.cfi_startproc
 1214              		@ args = 0, pretend = 0, frame = 8
 1215              		@ frame_needed = 1, uses_anonymous_args = 0
 1216 0000 80B5     		push	{r7, lr}
 1217              		.cfi_def_cfa_offset 8
 1218              		.cfi_offset 7, -8
 1219              		.cfi_offset 14, -4
 1220 0002 82B0     		sub	sp, sp, #8
 1221              		.cfi_def_cfa_offset 16
 1222 0004 00AF     		add	r7, sp, #0
 1223              		.cfi_def_cfa_register 7
 1224 0006 0346     		mov	r3, r0
 1225 0008 FB71     		strb	r3, [r7, #7]
 356:.\nrf24.c     ****     CE_Funk_Write(state);
 1226              		.loc 1 356 0
 1227 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1228 000c 1846     		mov	r0, r3
 1229 000e FFF7FEFF 		bl	CE_Funk_Write
 357:.\nrf24.c     **** }
 1230              		.loc 1 357 0
 1231 0012 0837     		adds	r7, r7, #8
 1232              		.cfi_def_cfa_offset 8
 1233 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 29


 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 0016 80BD     		pop	{r7, pc}
 1237              		.cfi_endproc
 1238              	.LFE86:
 1239              		.size	nrf24_ce_digitalWrite, .-nrf24_ce_digitalWrite
 1240              		.section	.text.nrf24_csn_digitalWrite,"ax",%progbits
 1241              		.align	2
 1242              		.global	nrf24_csn_digitalWrite
 1243              		.thumb
 1244              		.thumb_func
 1245              		.type	nrf24_csn_digitalWrite, %function
 1246              	nrf24_csn_digitalWrite:
 1247              	.LFB87:
 358:.\nrf24.c     **** 
 359:.\nrf24.c     **** void nrf24_csn_digitalWrite(uint8_t state)
 360:.\nrf24.c     **** {
 1248              		.loc 1 360 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 8
 1251              		@ frame_needed = 1, uses_anonymous_args = 0
 1252 0000 80B5     		push	{r7, lr}
 1253              		.cfi_def_cfa_offset 8
 1254              		.cfi_offset 7, -8
 1255              		.cfi_offset 14, -4
 1256 0002 82B0     		sub	sp, sp, #8
 1257              		.cfi_def_cfa_offset 16
 1258 0004 00AF     		add	r7, sp, #0
 1259              		.cfi_def_cfa_register 7
 1260 0006 0346     		mov	r3, r0
 1261 0008 FB71     		strb	r3, [r7, #7]
 361:.\nrf24.c     ****     SS_Funk_Write(state);
 1262              		.loc 1 361 0
 1263 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1264 000c 1846     		mov	r0, r3
 1265 000e FFF7FEFF 		bl	SS_Funk_Write
 362:.\nrf24.c     **** }
 1266              		.loc 1 362 0
 1267 0012 0837     		adds	r7, r7, #8
 1268              		.cfi_def_cfa_offset 8
 1269 0014 BD46     		mov	sp, r7
 1270              		.cfi_def_cfa_register 13
 1271              		@ sp needed
 1272 0016 80BD     		pop	{r7, pc}
 1273              		.cfi_endproc
 1274              	.LFE87:
 1275              		.size	nrf24_csn_digitalWrite, .-nrf24_csn_digitalWrite
 1276              		.section	.text.nrf24_sck_digitalWrite,"ax",%progbits
 1277              		.align	2
 1278              		.global	nrf24_sck_digitalWrite
 1279              		.thumb
 1280              		.thumb_func
 1281              		.type	nrf24_sck_digitalWrite, %function
 1282              	nrf24_sck_digitalWrite:
 1283              	.LFB88:
 363:.\nrf24.c     **** 
 364:.\nrf24.c     **** void nrf24_sck_digitalWrite(uint8_t state)
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 30


 365:.\nrf24.c     **** {
 1284              		.loc 1 365 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 8
 1287              		@ frame_needed = 1, uses_anonymous_args = 0
 1288 0000 80B5     		push	{r7, lr}
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 82B0     		sub	sp, sp, #8
 1293              		.cfi_def_cfa_offset 16
 1294 0004 00AF     		add	r7, sp, #0
 1295              		.cfi_def_cfa_register 7
 1296 0006 0346     		mov	r3, r0
 1297 0008 FB71     		strb	r3, [r7, #7]
 366:.\nrf24.c     ****     SCLK_Funk_Write(state);
 1298              		.loc 1 366 0
 1299 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1300 000c 1846     		mov	r0, r3
 1301 000e FFF7FEFF 		bl	SCLK_Funk_Write
 367:.\nrf24.c     **** }
 1302              		.loc 1 367 0
 1303 0012 0837     		adds	r7, r7, #8
 1304              		.cfi_def_cfa_offset 8
 1305 0014 BD46     		mov	sp, r7
 1306              		.cfi_def_cfa_register 13
 1307              		@ sp needed
 1308 0016 80BD     		pop	{r7, pc}
 1309              		.cfi_endproc
 1310              	.LFE88:
 1311              		.size	nrf24_sck_digitalWrite, .-nrf24_sck_digitalWrite
 1312              		.section	.text.nrf24_mosi_digitalWrite,"ax",%progbits
 1313              		.align	2
 1314              		.global	nrf24_mosi_digitalWrite
 1315              		.thumb
 1316              		.thumb_func
 1317              		.type	nrf24_mosi_digitalWrite, %function
 1318              	nrf24_mosi_digitalWrite:
 1319              	.LFB89:
 368:.\nrf24.c     **** 
 369:.\nrf24.c     **** void nrf24_mosi_digitalWrite(uint8_t state)
 370:.\nrf24.c     **** {
 1320              		.loc 1 370 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 8
 1323              		@ frame_needed = 1, uses_anonymous_args = 0
 1324 0000 80B5     		push	{r7, lr}
 1325              		.cfi_def_cfa_offset 8
 1326              		.cfi_offset 7, -8
 1327              		.cfi_offset 14, -4
 1328 0002 82B0     		sub	sp, sp, #8
 1329              		.cfi_def_cfa_offset 16
 1330 0004 00AF     		add	r7, sp, #0
 1331              		.cfi_def_cfa_register 7
 1332 0006 0346     		mov	r3, r0
 1333 0008 FB71     		strb	r3, [r7, #7]
 371:.\nrf24.c     ****     MOSI_Funk_Write(state);
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 31


 1334              		.loc 1 371 0
 1335 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1336 000c 1846     		mov	r0, r3
 1337 000e FFF7FEFF 		bl	MOSI_Funk_Write
 372:.\nrf24.c     **** }
 1338              		.loc 1 372 0
 1339 0012 0837     		adds	r7, r7, #8
 1340              		.cfi_def_cfa_offset 8
 1341 0014 BD46     		mov	sp, r7
 1342              		.cfi_def_cfa_register 13
 1343              		@ sp needed
 1344 0016 80BD     		pop	{r7, pc}
 1345              		.cfi_endproc
 1346              	.LFE89:
 1347              		.size	nrf24_mosi_digitalWrite, .-nrf24_mosi_digitalWrite
 1348              		.section	.text.nrf24_miso_digitalRead,"ax",%progbits
 1349              		.align	2
 1350              		.global	nrf24_miso_digitalRead
 1351              		.thumb
 1352              		.thumb_func
 1353              		.type	nrf24_miso_digitalRead, %function
 1354              	nrf24_miso_digitalRead:
 1355              	.LFB90:
 373:.\nrf24.c     **** 
 374:.\nrf24.c     **** uint8_t nrf24_miso_digitalRead()
 375:.\nrf24.c     **** {
 1356              		.loc 1 375 0
 1357              		.cfi_startproc
 1358              		@ args = 0, pretend = 0, frame = 0
 1359              		@ frame_needed = 1, uses_anonymous_args = 0
 1360 0000 80B5     		push	{r7, lr}
 1361              		.cfi_def_cfa_offset 8
 1362              		.cfi_offset 7, -8
 1363              		.cfi_offset 14, -4
 1364 0002 00AF     		add	r7, sp, #0
 1365              		.cfi_def_cfa_register 7
 376:.\nrf24.c     ****     return MISO_Funk_Read();
 1366              		.loc 1 376 0
 1367 0004 FFF7FEFF 		bl	MISO_Funk_Read
 1368 0008 0346     		mov	r3, r0
 377:.\nrf24.c     **** }
 1369              		.loc 1 377 0
 1370 000a 1846     		mov	r0, r3
 1371 000c 80BD     		pop	{r7, pc}
 1372              		.cfi_endproc
 1373              	.LFE90:
 1374              		.size	nrf24_miso_digitalRead, .-nrf24_miso_digitalRead
 1375 000e 00BF     		.text
 1376              	.Letext0:
 1377              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1378              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 1379              		.file 4 "Generated_Source\\PSoC5/core_cm3.h"
 1380              		.section	.debug_info,"",%progbits
 1381              	.Ldebug_info0:
 1382 0000 4B050000 		.4byte	0x54b
 1383 0004 0400     		.2byte	0x4
 1384 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 32


 1385 000a 04       		.byte	0x4
 1386 000b 01       		.uleb128 0x1
 1387 000c 1E010000 		.4byte	.LASF55
 1388 0010 01       		.byte	0x1
 1389 0011 FA020000 		.4byte	.LASF56
 1390 0015 54000000 		.4byte	.LASF57
 1391 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1392 001d 00000000 		.4byte	0
 1393 0021 00000000 		.4byte	.Ldebug_line0
 1394 0025 02       		.uleb128 0x2
 1395 0026 01       		.byte	0x1
 1396 0027 06       		.byte	0x6
 1397 0028 60020000 		.4byte	.LASF0
 1398 002c 03       		.uleb128 0x3
 1399 002d A0020000 		.4byte	.LASF4
 1400 0031 02       		.byte	0x2
 1401 0032 1D       		.byte	0x1d
 1402 0033 37000000 		.4byte	0x37
 1403 0037 02       		.uleb128 0x2
 1404 0038 01       		.byte	0x1
 1405 0039 08       		.byte	0x8
 1406 003a 20020000 		.4byte	.LASF1
 1407 003e 02       		.uleb128 0x2
 1408 003f 02       		.byte	0x2
 1409 0040 05       		.byte	0x5
 1410 0041 26000000 		.4byte	.LASF2
 1411 0045 02       		.uleb128 0x2
 1412 0046 02       		.byte	0x2
 1413 0047 07       		.byte	0x7
 1414 0048 CA020000 		.4byte	.LASF3
 1415 004c 03       		.uleb128 0x3
 1416 004d 98030000 		.4byte	.LASF5
 1417 0051 02       		.byte	0x2
 1418 0052 3F       		.byte	0x3f
 1419 0053 57000000 		.4byte	0x57
 1420 0057 02       		.uleb128 0x2
 1421 0058 04       		.byte	0x4
 1422 0059 05       		.byte	0x5
 1423 005a E9020000 		.4byte	.LASF6
 1424 005e 02       		.uleb128 0x2
 1425 005f 04       		.byte	0x4
 1426 0060 07       		.byte	0x7
 1427 0061 3B030000 		.4byte	.LASF7
 1428 0065 02       		.uleb128 0x2
 1429 0066 08       		.byte	0x8
 1430 0067 05       		.byte	0x5
 1431 0068 10010000 		.4byte	.LASF8
 1432 006c 02       		.uleb128 0x2
 1433 006d 08       		.byte	0x8
 1434 006e 07       		.byte	0x7
 1435 006f 6C020000 		.4byte	.LASF9
 1436 0073 04       		.uleb128 0x4
 1437 0074 04       		.byte	0x4
 1438 0075 05       		.byte	0x5
 1439 0076 696E7400 		.ascii	"int\000"
 1440 007a 02       		.uleb128 0x2
 1441 007b 04       		.byte	0x4
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 33


 1442 007c 07       		.byte	0x7
 1443 007d 83020000 		.4byte	.LASF10
 1444 0081 03       		.uleb128 0x3
 1445 0082 B5000000 		.4byte	.LASF11
 1446 0086 03       		.byte	0x3
 1447 0087 15       		.byte	0x15
 1448 0088 2C000000 		.4byte	0x2c
 1449 008c 03       		.uleb128 0x3
 1450 008d F2020000 		.4byte	.LASF12
 1451 0091 03       		.byte	0x3
 1452 0092 2C       		.byte	0x2c
 1453 0093 4C000000 		.4byte	0x4c
 1454 0097 02       		.uleb128 0x2
 1455 0098 04       		.byte	0x4
 1456 0099 04       		.byte	0x4
 1457 009a F4000000 		.4byte	.LASF13
 1458 009e 02       		.uleb128 0x2
 1459 009f 08       		.byte	0x8
 1460 00a0 04       		.byte	0x4
 1461 00a1 4D030000 		.4byte	.LASF14
 1462 00a5 02       		.uleb128 0x2
 1463 00a6 01       		.byte	0x1
 1464 00a7 08       		.byte	0x8
 1465 00a8 E4020000 		.4byte	.LASF15
 1466 00ac 02       		.uleb128 0x2
 1467 00ad 04       		.byte	0x4
 1468 00ae 07       		.byte	0x7
 1469 00af 30000000 		.4byte	.LASF16
 1470 00b3 05       		.uleb128 0x5
 1471 00b4 39000000 		.4byte	.LASF35
 1472 00b8 01       		.byte	0x1
 1473 00b9 13       		.byte	0x13
 1474 00ba 00000000 		.4byte	.LFB63
 1475 00be 16000000 		.4byte	.LFE63-.LFB63
 1476 00c2 01       		.uleb128 0x1
 1477 00c3 9C       		.byte	0x9c
 1478 00c4 06       		.uleb128 0x6
 1479 00c5 BD020000 		.4byte	.LASF19
 1480 00c9 01       		.byte	0x1
 1481 00ca 1B       		.byte	0x1b
 1482 00cb 00000000 		.4byte	.LFB64
 1483 00cf 94000000 		.4byte	.LFE64-.LFB64
 1484 00d3 01       		.uleb128 0x1
 1485 00d4 9C       		.byte	0x9c
 1486 00d5 F6000000 		.4byte	0xf6
 1487 00d9 07       		.uleb128 0x7
 1488 00da 1B030000 		.4byte	.LASF17
 1489 00de 01       		.byte	0x1
 1490 00df 1B       		.byte	0x1b
 1491 00e0 81000000 		.4byte	0x81
 1492 00e4 02       		.uleb128 0x2
 1493 00e5 91       		.byte	0x91
 1494 00e6 77       		.sleb128 -9
 1495 00e7 07       		.uleb128 0x7
 1496 00e8 01020000 		.4byte	.LASF18
 1497 00ec 01       		.byte	0x1
 1498 00ed 1B       		.byte	0x1b
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 34


 1499 00ee 81000000 		.4byte	0x81
 1500 00f2 02       		.uleb128 0x2
 1501 00f3 91       		.byte	0x91
 1502 00f4 76       		.sleb128 -10
 1503 00f5 00       		.byte	0
 1504 00f6 06       		.uleb128 0x6
 1505 00f7 F0030000 		.4byte	.LASF20
 1506 00fb 01       		.byte	0x1
 1507 00fc 42       		.byte	0x42
 1508 00fd 00000000 		.4byte	.LFB65
 1509 0101 24000000 		.4byte	.LFE65-.LFB65
 1510 0105 01       		.uleb128 0x1
 1511 0106 9C       		.byte	0x9c
 1512 0107 1A010000 		.4byte	0x11a
 1513 010b 08       		.uleb128 0x8
 1514 010c 61647200 		.ascii	"adr\000"
 1515 0110 01       		.byte	0x1
 1516 0111 42       		.byte	0x42
 1517 0112 1A010000 		.4byte	0x11a
 1518 0116 02       		.uleb128 0x2
 1519 0117 91       		.byte	0x91
 1520 0118 74       		.sleb128 -12
 1521 0119 00       		.byte	0
 1522 011a 09       		.uleb128 0x9
 1523 011b 04       		.byte	0x4
 1524 011c 81000000 		.4byte	0x81
 1525 0120 0A       		.uleb128 0xa
 1526 0121 00000000 		.4byte	.LASF51
 1527 0125 01       		.byte	0x1
 1528 0126 4A       		.byte	0x4a
 1529 0127 81000000 		.4byte	0x81
 1530 012b 00000000 		.4byte	.LFB66
 1531 012f 18000000 		.4byte	.LFE66-.LFB66
 1532 0133 01       		.uleb128 0x1
 1533 0134 9C       		.byte	0x9c
 1534 0135 06       		.uleb128 0x6
 1535 0136 54030000 		.4byte	.LASF21
 1536 013a 01       		.byte	0x1
 1537 013b 50       		.byte	0x50
 1538 013c 00000000 		.4byte	.LFB67
 1539 0140 22000000 		.4byte	.LFE67-.LFB67
 1540 0144 01       		.uleb128 0x1
 1541 0145 9C       		.byte	0x9c
 1542 0146 59010000 		.4byte	0x159
 1543 014a 08       		.uleb128 0x8
 1544 014b 61647200 		.ascii	"adr\000"
 1545 014f 01       		.byte	0x1
 1546 0150 50       		.byte	0x50
 1547 0151 1A010000 		.4byte	0x11a
 1548 0155 02       		.uleb128 0x2
 1549 0156 91       		.byte	0x91
 1550 0157 74       		.sleb128 -12
 1551 0158 00       		.byte	0
 1552 0159 0B       		.uleb128 0xb
 1553 015a AC010000 		.4byte	.LASF22
 1554 015e 01       		.byte	0x1
 1555 015f 59       		.byte	0x59
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 35


 1556 0160 81000000 		.4byte	0x81
 1557 0164 00000000 		.4byte	.LFB68
 1558 0168 34000000 		.4byte	.LFE68-.LFB68
 1559 016c 01       		.uleb128 0x1
 1560 016d 9C       		.byte	0x9c
 1561 016e 81010000 		.4byte	0x181
 1562 0172 0C       		.uleb128 0xc
 1563 0173 DD020000 		.4byte	.LASF24
 1564 0177 01       		.byte	0x1
 1565 0178 5C       		.byte	0x5c
 1566 0179 81000000 		.4byte	0x81
 1567 017d 02       		.uleb128 0x2
 1568 017e 91       		.byte	0x91
 1569 017f 77       		.sleb128 -9
 1570 0180 00       		.byte	0
 1571 0181 0B       		.uleb128 0xb
 1572 0182 D7010000 		.4byte	.LASF23
 1573 0186 01       		.byte	0x1
 1574 0187 69       		.byte	0x69
 1575 0188 81000000 		.4byte	0x81
 1576 018c 00000000 		.4byte	.LFB69
 1577 0190 22000000 		.4byte	.LFE69-.LFB69
 1578 0194 01       		.uleb128 0x1
 1579 0195 9C       		.byte	0x9c
 1580 0196 A9010000 		.4byte	0x1a9
 1581 019a 0C       		.uleb128 0xc
 1582 019b E1000000 		.4byte	.LASF25
 1583 019f 01       		.byte	0x1
 1584 01a0 6B       		.byte	0x6b
 1585 01a1 81000000 		.4byte	0x81
 1586 01a5 02       		.uleb128 0x2
 1587 01a6 91       		.byte	0x91
 1588 01a7 77       		.sleb128 -9
 1589 01a8 00       		.byte	0
 1590 01a9 0B       		.uleb128 0xb
 1591 01aa 0C020000 		.4byte	.LASF26
 1592 01ae 01       		.byte	0x1
 1593 01af 73       		.byte	0x73
 1594 01b0 81000000 		.4byte	0x81
 1595 01b4 00000000 		.4byte	.LFB70
 1596 01b8 2C000000 		.4byte	.LFE70-.LFB70
 1597 01bc 01       		.uleb128 0x1
 1598 01bd 9C       		.byte	0x9c
 1599 01be D1010000 		.4byte	0x1d1
 1600 01c2 0C       		.uleb128 0xc
 1601 01c3 DD020000 		.4byte	.LASF24
 1602 01c7 01       		.byte	0x1
 1603 01c8 75       		.byte	0x75
 1604 01c9 81000000 		.4byte	0x81
 1605 01cd 02       		.uleb128 0x2
 1606 01ce 91       		.byte	0x91
 1607 01cf 77       		.sleb128 -9
 1608 01d0 00       		.byte	0
 1609 01d1 06       		.uleb128 0x6
 1610 01d2 BC010000 		.4byte	.LASF27
 1611 01d6 01       		.byte	0x1
 1612 01d7 7E       		.byte	0x7e
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 36


 1613 01d8 00000000 		.4byte	.LFB71
 1614 01dc 3C000000 		.4byte	.LFE71-.LFB71
 1615 01e0 01       		.uleb128 0x1
 1616 01e1 9C       		.byte	0x9c
 1617 01e2 F5010000 		.4byte	0x1f5
 1618 01e6 07       		.uleb128 0x7
 1619 01e7 23030000 		.4byte	.LASF28
 1620 01eb 01       		.byte	0x1
 1621 01ec 7E       		.byte	0x7e
 1622 01ed 1A010000 		.4byte	0x11a
 1623 01f1 02       		.uleb128 0x2
 1624 01f2 91       		.byte	0x91
 1625 01f3 74       		.sleb128 -12
 1626 01f4 00       		.byte	0
 1627 01f5 0B       		.uleb128 0xb
 1628 01f6 46020000 		.4byte	.LASF29
 1629 01fa 01       		.byte	0x1
 1630 01fb 91       		.byte	0x91
 1631 01fc 81000000 		.4byte	0x81
 1632 0200 00000000 		.4byte	.LFB72
 1633 0204 26000000 		.4byte	.LFE72-.LFB72
 1634 0208 01       		.uleb128 0x1
 1635 0209 9C       		.byte	0x9c
 1636 020a 1C020000 		.4byte	0x21c
 1637 020e 0D       		.uleb128 0xd
 1638 020f 727600   		.ascii	"rv\000"
 1639 0212 01       		.byte	0x1
 1640 0213 93       		.byte	0x93
 1641 0214 81000000 		.4byte	0x81
 1642 0218 02       		.uleb128 0x2
 1643 0219 91       		.byte	0x91
 1644 021a 77       		.sleb128 -9
 1645 021b 00       		.byte	0
 1646 021c 06       		.uleb128 0x6
 1647 021d 15000000 		.4byte	.LASF30
 1648 0221 01       		.byte	0x1
 1649 0222 9B       		.byte	0x9b
 1650 0223 00000000 		.4byte	.LFB73
 1651 0227 54000000 		.4byte	.LFE73-.LFB73
 1652 022b 01       		.uleb128 0x1
 1653 022c 9C       		.byte	0x9c
 1654 022d 40020000 		.4byte	0x240
 1655 0231 07       		.uleb128 0x7
 1656 0232 AF000000 		.4byte	.LASF31
 1657 0236 01       		.byte	0x1
 1658 0237 9B       		.byte	0x9b
 1659 0238 1A010000 		.4byte	0x11a
 1660 023c 02       		.uleb128 0x2
 1661 023d 91       		.byte	0x91
 1662 023e 74       		.sleb128 -12
 1663 023f 00       		.byte	0
 1664 0240 0B       		.uleb128 0xb
 1665 0241 90020000 		.4byte	.LASF32
 1666 0245 01       		.byte	0x1
 1667 0246 BF       		.byte	0xbf
 1668 0247 81000000 		.4byte	0x81
 1669 024b 00000000 		.4byte	.LFB74
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 37


 1670 024f 26000000 		.4byte	.LFE74-.LFB74
 1671 0253 01       		.uleb128 0x1
 1672 0254 9C       		.byte	0x9c
 1673 0255 68020000 		.4byte	0x268
 1674 0259 0C       		.uleb128 0xc
 1675 025a DD020000 		.4byte	.LASF24
 1676 025e 01       		.byte	0x1
 1677 025f C1       		.byte	0xc1
 1678 0260 81000000 		.4byte	0x81
 1679 0264 02       		.uleb128 0x2
 1680 0265 91       		.byte	0x91
 1681 0266 77       		.sleb128 -9
 1682 0267 00       		.byte	0
 1683 0268 0B       		.uleb128 0xb
 1684 0269 44000000 		.4byte	.LASF33
 1685 026d 01       		.byte	0x1
 1686 026e D0       		.byte	0xd0
 1687 026f 81000000 		.4byte	0x81
 1688 0273 00000000 		.4byte	.LFB75
 1689 0277 26000000 		.4byte	.LFE75-.LFB75
 1690 027b 01       		.uleb128 0x1
 1691 027c 9C       		.byte	0x9c
 1692 027d 8F020000 		.4byte	0x28f
 1693 0281 0D       		.uleb128 0xd
 1694 0282 727600   		.ascii	"rv\000"
 1695 0285 01       		.byte	0x1
 1696 0286 D2       		.byte	0xd2
 1697 0287 81000000 		.4byte	0x81
 1698 028b 02       		.uleb128 0x2
 1699 028c 91       		.byte	0x91
 1700 028d 77       		.sleb128 -9
 1701 028e 00       		.byte	0
 1702 028f 0B       		.uleb128 0xb
 1703 0290 2E020000 		.4byte	.LASF34
 1704 0294 01       		.byte	0x1
 1705 0295 D9       		.byte	0xd9
 1706 0296 81000000 		.4byte	0x81
 1707 029a 00000000 		.4byte	.LFB76
 1708 029e 34000000 		.4byte	.LFE76-.LFB76
 1709 02a2 01       		.uleb128 0x1
 1710 02a3 9C       		.byte	0x9c
 1711 02a4 B6020000 		.4byte	0x2b6
 1712 02a8 0D       		.uleb128 0xd
 1713 02a9 727600   		.ascii	"rv\000"
 1714 02ac 01       		.byte	0x1
 1715 02ad DB       		.byte	0xdb
 1716 02ae 81000000 		.4byte	0x81
 1717 02b2 02       		.uleb128 0x2
 1718 02b3 91       		.byte	0x91
 1719 02b4 77       		.sleb128 -9
 1720 02b5 00       		.byte	0
 1721 02b6 05       		.uleb128 0x5
 1722 02b7 D1000000 		.4byte	.LASF36
 1723 02bb 01       		.byte	0x1
 1724 02bc F1       		.byte	0xf1
 1725 02bd 00000000 		.4byte	.LFB77
 1726 02c1 34000000 		.4byte	.LFE77-.LFB77
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 38


 1727 02c5 01       		.uleb128 0x1
 1728 02c6 9C       		.byte	0x9c
 1729 02c7 05       		.uleb128 0x5
 1730 02c8 78030000 		.4byte	.LASF37
 1731 02cc 01       		.byte	0x1
 1732 02cd FE       		.byte	0xfe
 1733 02ce 00000000 		.4byte	.LFB78
 1734 02d2 16000000 		.4byte	.LFE78-.LFB78
 1735 02d6 01       		.uleb128 0x1
 1736 02d7 9C       		.byte	0x9c
 1737 02d8 0E       		.uleb128 0xe
 1738 02d9 88030000 		.4byte	.LASF38
 1739 02dd 01       		.byte	0x1
 1740 02de 0501     		.2byte	0x105
 1741 02e0 00000000 		.4byte	.LFB79
 1742 02e4 14000000 		.4byte	.LFE79-.LFB79
 1743 02e8 01       		.uleb128 0x1
 1744 02e9 9C       		.byte	0x9c
 1745 02ea 0F       		.uleb128 0xf
 1746 02eb CA010000 		.4byte	.LASF58
 1747 02ef 01       		.byte	0x1
 1748 02f0 0C01     		.2byte	0x10c
 1749 02f2 81000000 		.4byte	0x81
 1750 02f6 00000000 		.4byte	.LFB80
 1751 02fa 7A000000 		.4byte	.LFE80-.LFB80
 1752 02fe 01       		.uleb128 0x1
 1753 02ff 9C       		.byte	0x9c
 1754 0300 2E030000 		.4byte	0x32e
 1755 0304 10       		.uleb128 0x10
 1756 0305 747800   		.ascii	"tx\000"
 1757 0308 01       		.byte	0x1
 1758 0309 0C01     		.2byte	0x10c
 1759 030b 81000000 		.4byte	0x81
 1760 030f 02       		.uleb128 0x2
 1761 0310 91       		.byte	0x91
 1762 0311 6F       		.sleb128 -17
 1763 0312 11       		.uleb128 0x11
 1764 0313 6900     		.ascii	"i\000"
 1765 0315 01       		.byte	0x1
 1766 0316 0E01     		.2byte	0x10e
 1767 0318 81000000 		.4byte	0x81
 1768 031c 02       		.uleb128 0x2
 1769 031d 91       		.byte	0x91
 1770 031e 77       		.sleb128 -9
 1771 031f 11       		.uleb128 0x11
 1772 0320 727800   		.ascii	"rx\000"
 1773 0323 01       		.byte	0x1
 1774 0324 0F01     		.2byte	0x10f
 1775 0326 81000000 		.4byte	0x81
 1776 032a 02       		.uleb128 0x2
 1777 032b 91       		.byte	0x91
 1778 032c 76       		.sleb128 -10
 1779 032d 00       		.byte	0
 1780 032e 12       		.uleb128 0x12
 1781 032f 65030000 		.4byte	.LASF39
 1782 0333 01       		.byte	0x1
 1783 0334 2F01     		.2byte	0x12f
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 39


 1784 0336 00000000 		.4byte	.LFB81
 1785 033a 40000000 		.4byte	.LFE81-.LFB81
 1786 033e 01       		.uleb128 0x1
 1787 033f 9C       		.byte	0x9c
 1788 0340 7F030000 		.4byte	0x37f
 1789 0344 13       		.uleb128 0x13
 1790 0345 EC000000 		.4byte	.LASF40
 1791 0349 01       		.byte	0x1
 1792 034a 2F01     		.2byte	0x12f
 1793 034c 1A010000 		.4byte	0x11a
 1794 0350 02       		.uleb128 0x2
 1795 0351 91       		.byte	0x91
 1796 0352 64       		.sleb128 -28
 1797 0353 13       		.uleb128 0x13
 1798 0354 E9030000 		.4byte	.LASF41
 1799 0358 01       		.byte	0x1
 1800 0359 2F01     		.2byte	0x12f
 1801 035b 1A010000 		.4byte	0x11a
 1802 035f 02       		.uleb128 0x2
 1803 0360 91       		.byte	0x91
 1804 0361 60       		.sleb128 -32
 1805 0362 10       		.uleb128 0x10
 1806 0363 6C656E00 		.ascii	"len\000"
 1807 0367 01       		.byte	0x1
 1808 0368 2F01     		.2byte	0x12f
 1809 036a 81000000 		.4byte	0x81
 1810 036e 02       		.uleb128 0x2
 1811 036f 91       		.byte	0x91
 1812 0370 5F       		.sleb128 -33
 1813 0371 11       		.uleb128 0x11
 1814 0372 6900     		.ascii	"i\000"
 1815 0374 01       		.byte	0x1
 1816 0375 3101     		.2byte	0x131
 1817 0377 81000000 		.4byte	0x81
 1818 037b 02       		.uleb128 0x2
 1819 037c 91       		.byte	0x91
 1820 037d 6F       		.sleb128 -17
 1821 037e 00       		.byte	0
 1822 037f 12       		.uleb128 0x12
 1823 0380 28030000 		.4byte	.LASF42
 1824 0384 01       		.byte	0x1
 1825 0385 3B01     		.2byte	0x13b
 1826 0387 00000000 		.4byte	.LFB82
 1827 038b 34000000 		.4byte	.LFE82-.LFB82
 1828 038f 01       		.uleb128 0x1
 1829 0390 9C       		.byte	0x9c
 1830 0391 C1030000 		.4byte	0x3c1
 1831 0395 13       		.uleb128 0x13
 1832 0396 EC000000 		.4byte	.LASF40
 1833 039a 01       		.byte	0x1
 1834 039b 3B01     		.2byte	0x13b
 1835 039d 1A010000 		.4byte	0x11a
 1836 03a1 02       		.uleb128 0x2
 1837 03a2 91       		.byte	0x91
 1838 03a3 6C       		.sleb128 -20
 1839 03a4 10       		.uleb128 0x10
 1840 03a5 6C656E00 		.ascii	"len\000"
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 40


 1841 03a9 01       		.byte	0x1
 1842 03aa 3B01     		.2byte	0x13b
 1843 03ac 81000000 		.4byte	0x81
 1844 03b0 02       		.uleb128 0x2
 1845 03b1 91       		.byte	0x91
 1846 03b2 6B       		.sleb128 -21
 1847 03b3 11       		.uleb128 0x11
 1848 03b4 6900     		.ascii	"i\000"
 1849 03b6 01       		.byte	0x1
 1850 03b7 3D01     		.2byte	0x13d
 1851 03b9 81000000 		.4byte	0x81
 1852 03bd 02       		.uleb128 0x2
 1853 03be 91       		.byte	0x91
 1854 03bf 77       		.sleb128 -9
 1855 03c0 00       		.byte	0
 1856 03c1 12       		.uleb128 0x12
 1857 03c2 01040000 		.4byte	.LASF43
 1858 03c6 01       		.byte	0x1
 1859 03c7 4701     		.2byte	0x147
 1860 03c9 00000000 		.4byte	.LFB83
 1861 03cd 3E000000 		.4byte	.LFE83-.LFB83
 1862 03d1 01       		.uleb128 0x1
 1863 03d2 9C       		.byte	0x9c
 1864 03d3 F6030000 		.4byte	0x3f6
 1865 03d7 10       		.uleb128 0x10
 1866 03d8 72656700 		.ascii	"reg\000"
 1867 03dc 01       		.byte	0x1
 1868 03dd 4701     		.2byte	0x147
 1869 03df 81000000 		.4byte	0x81
 1870 03e3 02       		.uleb128 0x2
 1871 03e4 91       		.byte	0x91
 1872 03e5 77       		.sleb128 -9
 1873 03e6 13       		.uleb128 0x13
 1874 03e7 AF000000 		.4byte	.LASF31
 1875 03eb 01       		.byte	0x1
 1876 03ec 4701     		.2byte	0x147
 1877 03ee 81000000 		.4byte	0x81
 1878 03f2 02       		.uleb128 0x2
 1879 03f3 91       		.byte	0x91
 1880 03f4 76       		.sleb128 -10
 1881 03f5 00       		.byte	0
 1882 03f6 12       		.uleb128 0x12
 1883 03f7 AA020000 		.4byte	.LASF44
 1884 03fb 01       		.byte	0x1
 1885 03fc 5001     		.2byte	0x150
 1886 03fe 00000000 		.4byte	.LFB84
 1887 0402 3C000000 		.4byte	.LFE84-.LFB84
 1888 0406 01       		.uleb128 0x1
 1889 0407 9C       		.byte	0x9c
 1890 0408 3A040000 		.4byte	0x43a
 1891 040c 10       		.uleb128 0x10
 1892 040d 72656700 		.ascii	"reg\000"
 1893 0411 01       		.byte	0x1
 1894 0412 5001     		.2byte	0x150
 1895 0414 81000000 		.4byte	0x81
 1896 0418 02       		.uleb128 0x2
 1897 0419 91       		.byte	0x91
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 41


 1898 041a 77       		.sleb128 -9
 1899 041b 13       		.uleb128 0x13
 1900 041c AF000000 		.4byte	.LASF31
 1901 0420 01       		.byte	0x1
 1902 0421 5001     		.2byte	0x150
 1903 0423 1A010000 		.4byte	0x11a
 1904 0427 02       		.uleb128 0x2
 1905 0428 91       		.byte	0x91
 1906 0429 70       		.sleb128 -16
 1907 042a 10       		.uleb128 0x10
 1908 042b 6C656E00 		.ascii	"len\000"
 1909 042f 01       		.byte	0x1
 1910 0430 5001     		.2byte	0x150
 1911 0432 81000000 		.4byte	0x81
 1912 0436 02       		.uleb128 0x2
 1913 0437 91       		.byte	0x91
 1914 0438 76       		.sleb128 -10
 1915 0439 00       		.byte	0
 1916 043a 12       		.uleb128 0x12
 1917 043b BD000000 		.4byte	.LASF45
 1918 043f 01       		.byte	0x1
 1919 0440 5901     		.2byte	0x159
 1920 0442 00000000 		.4byte	.LFB85
 1921 0446 40000000 		.4byte	.LFE85-.LFB85
 1922 044a 01       		.uleb128 0x1
 1923 044b 9C       		.byte	0x9c
 1924 044c 7E040000 		.4byte	0x47e
 1925 0450 10       		.uleb128 0x10
 1926 0451 72656700 		.ascii	"reg\000"
 1927 0455 01       		.byte	0x1
 1928 0456 5901     		.2byte	0x159
 1929 0458 81000000 		.4byte	0x81
 1930 045c 02       		.uleb128 0x2
 1931 045d 91       		.byte	0x91
 1932 045e 77       		.sleb128 -9
 1933 045f 13       		.uleb128 0x13
 1934 0460 AF000000 		.4byte	.LASF31
 1935 0464 01       		.byte	0x1
 1936 0465 5901     		.2byte	0x159
 1937 0467 1A010000 		.4byte	0x11a
 1938 046b 02       		.uleb128 0x2
 1939 046c 91       		.byte	0x91
 1940 046d 70       		.sleb128 -16
 1941 046e 10       		.uleb128 0x10
 1942 046f 6C656E00 		.ascii	"len\000"
 1943 0473 01       		.byte	0x1
 1944 0474 5901     		.2byte	0x159
 1945 0476 81000000 		.4byte	0x81
 1946 047a 02       		.uleb128 0x2
 1947 047b 91       		.byte	0x91
 1948 047c 76       		.sleb128 -10
 1949 047d 00       		.byte	0
 1950 047e 12       		.uleb128 0x12
 1951 047f FA000000 		.4byte	.LASF46
 1952 0483 01       		.byte	0x1
 1953 0484 6201     		.2byte	0x162
 1954 0486 00000000 		.4byte	.LFB86
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 42


 1955 048a 18000000 		.4byte	.LFE86-.LFB86
 1956 048e 01       		.uleb128 0x1
 1957 048f 9C       		.byte	0x9c
 1958 0490 A4040000 		.4byte	0x4a4
 1959 0494 13       		.uleb128 0x13
 1960 0495 20000000 		.4byte	.LASF47
 1961 0499 01       		.byte	0x1
 1962 049a 6201     		.2byte	0x162
 1963 049c 81000000 		.4byte	0x81
 1964 04a0 02       		.uleb128 0x2
 1965 04a1 91       		.byte	0x91
 1966 04a2 77       		.sleb128 -9
 1967 04a3 00       		.byte	0
 1968 04a4 12       		.uleb128 0x12
 1969 04a5 B9030000 		.4byte	.LASF48
 1970 04a9 01       		.byte	0x1
 1971 04aa 6701     		.2byte	0x167
 1972 04ac 00000000 		.4byte	.LFB87
 1973 04b0 18000000 		.4byte	.LFE87-.LFB87
 1974 04b4 01       		.uleb128 0x1
 1975 04b5 9C       		.byte	0x9c
 1976 04b6 CA040000 		.4byte	0x4ca
 1977 04ba 13       		.uleb128 0x13
 1978 04bb 20000000 		.4byte	.LASF47
 1979 04bf 01       		.byte	0x1
 1980 04c0 6701     		.2byte	0x167
 1981 04c2 81000000 		.4byte	0x81
 1982 04c6 02       		.uleb128 0x2
 1983 04c7 91       		.byte	0x91
 1984 04c8 77       		.sleb128 -9
 1985 04c9 00       		.byte	0
 1986 04ca 12       		.uleb128 0x12
 1987 04cb 04030000 		.4byte	.LASF49
 1988 04cf 01       		.byte	0x1
 1989 04d0 6C01     		.2byte	0x16c
 1990 04d2 00000000 		.4byte	.LFB88
 1991 04d6 18000000 		.4byte	.LFE88-.LFB88
 1992 04da 01       		.uleb128 0x1
 1993 04db 9C       		.byte	0x9c
 1994 04dc F0040000 		.4byte	0x4f0
 1995 04e0 13       		.uleb128 0x13
 1996 04e1 20000000 		.4byte	.LASF47
 1997 04e5 01       		.byte	0x1
 1998 04e6 6C01     		.2byte	0x16c
 1999 04e8 81000000 		.4byte	0x81
 2000 04ec 02       		.uleb128 0x2
 2001 04ed 91       		.byte	0x91
 2002 04ee 77       		.sleb128 -9
 2003 04ef 00       		.byte	0
 2004 04f0 12       		.uleb128 0x12
 2005 04f1 E9010000 		.4byte	.LASF50
 2006 04f5 01       		.byte	0x1
 2007 04f6 7101     		.2byte	0x171
 2008 04f8 00000000 		.4byte	.LFB89
 2009 04fc 18000000 		.4byte	.LFE89-.LFB89
 2010 0500 01       		.uleb128 0x1
 2011 0501 9C       		.byte	0x9c
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 43


 2012 0502 16050000 		.4byte	0x516
 2013 0506 13       		.uleb128 0x13
 2014 0507 20000000 		.4byte	.LASF47
 2015 050b 01       		.byte	0x1
 2016 050c 7101     		.2byte	0x171
 2017 050e 81000000 		.4byte	0x81
 2018 0512 02       		.uleb128 0x2
 2019 0513 91       		.byte	0x91
 2020 0514 77       		.sleb128 -9
 2021 0515 00       		.byte	0
 2022 0516 14       		.uleb128 0x14
 2023 0517 A2030000 		.4byte	.LASF52
 2024 051b 01       		.byte	0x1
 2025 051c 7601     		.2byte	0x176
 2026 051e 81000000 		.4byte	0x81
 2027 0522 00000000 		.4byte	.LFB90
 2028 0526 0E000000 		.4byte	.LFE90-.LFB90
 2029 052a 01       		.uleb128 0x1
 2030 052b 9C       		.byte	0x9c
 2031 052c 15       		.uleb128 0x15
 2032 052d DC030000 		.4byte	.LASF53
 2033 0531 04       		.byte	0x4
 2034 0532 5506     		.2byte	0x655
 2035 0534 38050000 		.4byte	0x538
 2036 0538 16       		.uleb128 0x16
 2037 0539 8C000000 		.4byte	0x8c
 2038 053d 17       		.uleb128 0x17
 2039 053e D0030000 		.4byte	.LASF54
 2040 0542 01       		.byte	0x1
 2041 0543 10       		.byte	0x10
 2042 0544 81000000 		.4byte	0x81
 2043 0548 05       		.uleb128 0x5
 2044 0549 03       		.byte	0x3
 2045 054a 00000000 		.4byte	payload_len
 2046 054e 00       		.byte	0
 2047              		.section	.debug_abbrev,"",%progbits
 2048              	.Ldebug_abbrev0:
 2049 0000 01       		.uleb128 0x1
 2050 0001 11       		.uleb128 0x11
 2051 0002 01       		.byte	0x1
 2052 0003 25       		.uleb128 0x25
 2053 0004 0E       		.uleb128 0xe
 2054 0005 13       		.uleb128 0x13
 2055 0006 0B       		.uleb128 0xb
 2056 0007 03       		.uleb128 0x3
 2057 0008 0E       		.uleb128 0xe
 2058 0009 1B       		.uleb128 0x1b
 2059 000a 0E       		.uleb128 0xe
 2060 000b 55       		.uleb128 0x55
 2061 000c 17       		.uleb128 0x17
 2062 000d 11       		.uleb128 0x11
 2063 000e 01       		.uleb128 0x1
 2064 000f 10       		.uleb128 0x10
 2065 0010 17       		.uleb128 0x17
 2066 0011 00       		.byte	0
 2067 0012 00       		.byte	0
 2068 0013 02       		.uleb128 0x2
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 44


 2069 0014 24       		.uleb128 0x24
 2070 0015 00       		.byte	0
 2071 0016 0B       		.uleb128 0xb
 2072 0017 0B       		.uleb128 0xb
 2073 0018 3E       		.uleb128 0x3e
 2074 0019 0B       		.uleb128 0xb
 2075 001a 03       		.uleb128 0x3
 2076 001b 0E       		.uleb128 0xe
 2077 001c 00       		.byte	0
 2078 001d 00       		.byte	0
 2079 001e 03       		.uleb128 0x3
 2080 001f 16       		.uleb128 0x16
 2081 0020 00       		.byte	0
 2082 0021 03       		.uleb128 0x3
 2083 0022 0E       		.uleb128 0xe
 2084 0023 3A       		.uleb128 0x3a
 2085 0024 0B       		.uleb128 0xb
 2086 0025 3B       		.uleb128 0x3b
 2087 0026 0B       		.uleb128 0xb
 2088 0027 49       		.uleb128 0x49
 2089 0028 13       		.uleb128 0x13
 2090 0029 00       		.byte	0
 2091 002a 00       		.byte	0
 2092 002b 04       		.uleb128 0x4
 2093 002c 24       		.uleb128 0x24
 2094 002d 00       		.byte	0
 2095 002e 0B       		.uleb128 0xb
 2096 002f 0B       		.uleb128 0xb
 2097 0030 3E       		.uleb128 0x3e
 2098 0031 0B       		.uleb128 0xb
 2099 0032 03       		.uleb128 0x3
 2100 0033 08       		.uleb128 0x8
 2101 0034 00       		.byte	0
 2102 0035 00       		.byte	0
 2103 0036 05       		.uleb128 0x5
 2104 0037 2E       		.uleb128 0x2e
 2105 0038 00       		.byte	0
 2106 0039 3F       		.uleb128 0x3f
 2107 003a 19       		.uleb128 0x19
 2108 003b 03       		.uleb128 0x3
 2109 003c 0E       		.uleb128 0xe
 2110 003d 3A       		.uleb128 0x3a
 2111 003e 0B       		.uleb128 0xb
 2112 003f 3B       		.uleb128 0x3b
 2113 0040 0B       		.uleb128 0xb
 2114 0041 11       		.uleb128 0x11
 2115 0042 01       		.uleb128 0x1
 2116 0043 12       		.uleb128 0x12
 2117 0044 06       		.uleb128 0x6
 2118 0045 40       		.uleb128 0x40
 2119 0046 18       		.uleb128 0x18
 2120 0047 9642     		.uleb128 0x2116
 2121 0049 19       		.uleb128 0x19
 2122 004a 00       		.byte	0
 2123 004b 00       		.byte	0
 2124 004c 06       		.uleb128 0x6
 2125 004d 2E       		.uleb128 0x2e
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 45


 2126 004e 01       		.byte	0x1
 2127 004f 3F       		.uleb128 0x3f
 2128 0050 19       		.uleb128 0x19
 2129 0051 03       		.uleb128 0x3
 2130 0052 0E       		.uleb128 0xe
 2131 0053 3A       		.uleb128 0x3a
 2132 0054 0B       		.uleb128 0xb
 2133 0055 3B       		.uleb128 0x3b
 2134 0056 0B       		.uleb128 0xb
 2135 0057 27       		.uleb128 0x27
 2136 0058 19       		.uleb128 0x19
 2137 0059 11       		.uleb128 0x11
 2138 005a 01       		.uleb128 0x1
 2139 005b 12       		.uleb128 0x12
 2140 005c 06       		.uleb128 0x6
 2141 005d 40       		.uleb128 0x40
 2142 005e 18       		.uleb128 0x18
 2143 005f 9642     		.uleb128 0x2116
 2144 0061 19       		.uleb128 0x19
 2145 0062 01       		.uleb128 0x1
 2146 0063 13       		.uleb128 0x13
 2147 0064 00       		.byte	0
 2148 0065 00       		.byte	0
 2149 0066 07       		.uleb128 0x7
 2150 0067 05       		.uleb128 0x5
 2151 0068 00       		.byte	0
 2152 0069 03       		.uleb128 0x3
 2153 006a 0E       		.uleb128 0xe
 2154 006b 3A       		.uleb128 0x3a
 2155 006c 0B       		.uleb128 0xb
 2156 006d 3B       		.uleb128 0x3b
 2157 006e 0B       		.uleb128 0xb
 2158 006f 49       		.uleb128 0x49
 2159 0070 13       		.uleb128 0x13
 2160 0071 02       		.uleb128 0x2
 2161 0072 18       		.uleb128 0x18
 2162 0073 00       		.byte	0
 2163 0074 00       		.byte	0
 2164 0075 08       		.uleb128 0x8
 2165 0076 05       		.uleb128 0x5
 2166 0077 00       		.byte	0
 2167 0078 03       		.uleb128 0x3
 2168 0079 08       		.uleb128 0x8
 2169 007a 3A       		.uleb128 0x3a
 2170 007b 0B       		.uleb128 0xb
 2171 007c 3B       		.uleb128 0x3b
 2172 007d 0B       		.uleb128 0xb
 2173 007e 49       		.uleb128 0x49
 2174 007f 13       		.uleb128 0x13
 2175 0080 02       		.uleb128 0x2
 2176 0081 18       		.uleb128 0x18
 2177 0082 00       		.byte	0
 2178 0083 00       		.byte	0
 2179 0084 09       		.uleb128 0x9
 2180 0085 0F       		.uleb128 0xf
 2181 0086 00       		.byte	0
 2182 0087 0B       		.uleb128 0xb
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 46


 2183 0088 0B       		.uleb128 0xb
 2184 0089 49       		.uleb128 0x49
 2185 008a 13       		.uleb128 0x13
 2186 008b 00       		.byte	0
 2187 008c 00       		.byte	0
 2188 008d 0A       		.uleb128 0xa
 2189 008e 2E       		.uleb128 0x2e
 2190 008f 00       		.byte	0
 2191 0090 3F       		.uleb128 0x3f
 2192 0091 19       		.uleb128 0x19
 2193 0092 03       		.uleb128 0x3
 2194 0093 0E       		.uleb128 0xe
 2195 0094 3A       		.uleb128 0x3a
 2196 0095 0B       		.uleb128 0xb
 2197 0096 3B       		.uleb128 0x3b
 2198 0097 0B       		.uleb128 0xb
 2199 0098 49       		.uleb128 0x49
 2200 0099 13       		.uleb128 0x13
 2201 009a 11       		.uleb128 0x11
 2202 009b 01       		.uleb128 0x1
 2203 009c 12       		.uleb128 0x12
 2204 009d 06       		.uleb128 0x6
 2205 009e 40       		.uleb128 0x40
 2206 009f 18       		.uleb128 0x18
 2207 00a0 9742     		.uleb128 0x2117
 2208 00a2 19       		.uleb128 0x19
 2209 00a3 00       		.byte	0
 2210 00a4 00       		.byte	0
 2211 00a5 0B       		.uleb128 0xb
 2212 00a6 2E       		.uleb128 0x2e
 2213 00a7 01       		.byte	0x1
 2214 00a8 3F       		.uleb128 0x3f
 2215 00a9 19       		.uleb128 0x19
 2216 00aa 03       		.uleb128 0x3
 2217 00ab 0E       		.uleb128 0xe
 2218 00ac 3A       		.uleb128 0x3a
 2219 00ad 0B       		.uleb128 0xb
 2220 00ae 3B       		.uleb128 0x3b
 2221 00af 0B       		.uleb128 0xb
 2222 00b0 49       		.uleb128 0x49
 2223 00b1 13       		.uleb128 0x13
 2224 00b2 11       		.uleb128 0x11
 2225 00b3 01       		.uleb128 0x1
 2226 00b4 12       		.uleb128 0x12
 2227 00b5 06       		.uleb128 0x6
 2228 00b6 40       		.uleb128 0x40
 2229 00b7 18       		.uleb128 0x18
 2230 00b8 9642     		.uleb128 0x2116
 2231 00ba 19       		.uleb128 0x19
 2232 00bb 01       		.uleb128 0x1
 2233 00bc 13       		.uleb128 0x13
 2234 00bd 00       		.byte	0
 2235 00be 00       		.byte	0
 2236 00bf 0C       		.uleb128 0xc
 2237 00c0 34       		.uleb128 0x34
 2238 00c1 00       		.byte	0
 2239 00c2 03       		.uleb128 0x3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 47


 2240 00c3 0E       		.uleb128 0xe
 2241 00c4 3A       		.uleb128 0x3a
 2242 00c5 0B       		.uleb128 0xb
 2243 00c6 3B       		.uleb128 0x3b
 2244 00c7 0B       		.uleb128 0xb
 2245 00c8 49       		.uleb128 0x49
 2246 00c9 13       		.uleb128 0x13
 2247 00ca 02       		.uleb128 0x2
 2248 00cb 18       		.uleb128 0x18
 2249 00cc 00       		.byte	0
 2250 00cd 00       		.byte	0
 2251 00ce 0D       		.uleb128 0xd
 2252 00cf 34       		.uleb128 0x34
 2253 00d0 00       		.byte	0
 2254 00d1 03       		.uleb128 0x3
 2255 00d2 08       		.uleb128 0x8
 2256 00d3 3A       		.uleb128 0x3a
 2257 00d4 0B       		.uleb128 0xb
 2258 00d5 3B       		.uleb128 0x3b
 2259 00d6 0B       		.uleb128 0xb
 2260 00d7 49       		.uleb128 0x49
 2261 00d8 13       		.uleb128 0x13
 2262 00d9 02       		.uleb128 0x2
 2263 00da 18       		.uleb128 0x18
 2264 00db 00       		.byte	0
 2265 00dc 00       		.byte	0
 2266 00dd 0E       		.uleb128 0xe
 2267 00de 2E       		.uleb128 0x2e
 2268 00df 00       		.byte	0
 2269 00e0 3F       		.uleb128 0x3f
 2270 00e1 19       		.uleb128 0x19
 2271 00e2 03       		.uleb128 0x3
 2272 00e3 0E       		.uleb128 0xe
 2273 00e4 3A       		.uleb128 0x3a
 2274 00e5 0B       		.uleb128 0xb
 2275 00e6 3B       		.uleb128 0x3b
 2276 00e7 05       		.uleb128 0x5
 2277 00e8 11       		.uleb128 0x11
 2278 00e9 01       		.uleb128 0x1
 2279 00ea 12       		.uleb128 0x12
 2280 00eb 06       		.uleb128 0x6
 2281 00ec 40       		.uleb128 0x40
 2282 00ed 18       		.uleb128 0x18
 2283 00ee 9642     		.uleb128 0x2116
 2284 00f0 19       		.uleb128 0x19
 2285 00f1 00       		.byte	0
 2286 00f2 00       		.byte	0
 2287 00f3 0F       		.uleb128 0xf
 2288 00f4 2E       		.uleb128 0x2e
 2289 00f5 01       		.byte	0x1
 2290 00f6 3F       		.uleb128 0x3f
 2291 00f7 19       		.uleb128 0x19
 2292 00f8 03       		.uleb128 0x3
 2293 00f9 0E       		.uleb128 0xe
 2294 00fa 3A       		.uleb128 0x3a
 2295 00fb 0B       		.uleb128 0xb
 2296 00fc 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 48


 2297 00fd 05       		.uleb128 0x5
 2298 00fe 27       		.uleb128 0x27
 2299 00ff 19       		.uleb128 0x19
 2300 0100 49       		.uleb128 0x49
 2301 0101 13       		.uleb128 0x13
 2302 0102 11       		.uleb128 0x11
 2303 0103 01       		.uleb128 0x1
 2304 0104 12       		.uleb128 0x12
 2305 0105 06       		.uleb128 0x6
 2306 0106 40       		.uleb128 0x40
 2307 0107 18       		.uleb128 0x18
 2308 0108 9642     		.uleb128 0x2116
 2309 010a 19       		.uleb128 0x19
 2310 010b 01       		.uleb128 0x1
 2311 010c 13       		.uleb128 0x13
 2312 010d 00       		.byte	0
 2313 010e 00       		.byte	0
 2314 010f 10       		.uleb128 0x10
 2315 0110 05       		.uleb128 0x5
 2316 0111 00       		.byte	0
 2317 0112 03       		.uleb128 0x3
 2318 0113 08       		.uleb128 0x8
 2319 0114 3A       		.uleb128 0x3a
 2320 0115 0B       		.uleb128 0xb
 2321 0116 3B       		.uleb128 0x3b
 2322 0117 05       		.uleb128 0x5
 2323 0118 49       		.uleb128 0x49
 2324 0119 13       		.uleb128 0x13
 2325 011a 02       		.uleb128 0x2
 2326 011b 18       		.uleb128 0x18
 2327 011c 00       		.byte	0
 2328 011d 00       		.byte	0
 2329 011e 11       		.uleb128 0x11
 2330 011f 34       		.uleb128 0x34
 2331 0120 00       		.byte	0
 2332 0121 03       		.uleb128 0x3
 2333 0122 08       		.uleb128 0x8
 2334 0123 3A       		.uleb128 0x3a
 2335 0124 0B       		.uleb128 0xb
 2336 0125 3B       		.uleb128 0x3b
 2337 0126 05       		.uleb128 0x5
 2338 0127 49       		.uleb128 0x49
 2339 0128 13       		.uleb128 0x13
 2340 0129 02       		.uleb128 0x2
 2341 012a 18       		.uleb128 0x18
 2342 012b 00       		.byte	0
 2343 012c 00       		.byte	0
 2344 012d 12       		.uleb128 0x12
 2345 012e 2E       		.uleb128 0x2e
 2346 012f 01       		.byte	0x1
 2347 0130 3F       		.uleb128 0x3f
 2348 0131 19       		.uleb128 0x19
 2349 0132 03       		.uleb128 0x3
 2350 0133 0E       		.uleb128 0xe
 2351 0134 3A       		.uleb128 0x3a
 2352 0135 0B       		.uleb128 0xb
 2353 0136 3B       		.uleb128 0x3b
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 49


 2354 0137 05       		.uleb128 0x5
 2355 0138 27       		.uleb128 0x27
 2356 0139 19       		.uleb128 0x19
 2357 013a 11       		.uleb128 0x11
 2358 013b 01       		.uleb128 0x1
 2359 013c 12       		.uleb128 0x12
 2360 013d 06       		.uleb128 0x6
 2361 013e 40       		.uleb128 0x40
 2362 013f 18       		.uleb128 0x18
 2363 0140 9642     		.uleb128 0x2116
 2364 0142 19       		.uleb128 0x19
 2365 0143 01       		.uleb128 0x1
 2366 0144 13       		.uleb128 0x13
 2367 0145 00       		.byte	0
 2368 0146 00       		.byte	0
 2369 0147 13       		.uleb128 0x13
 2370 0148 05       		.uleb128 0x5
 2371 0149 00       		.byte	0
 2372 014a 03       		.uleb128 0x3
 2373 014b 0E       		.uleb128 0xe
 2374 014c 3A       		.uleb128 0x3a
 2375 014d 0B       		.uleb128 0xb
 2376 014e 3B       		.uleb128 0x3b
 2377 014f 05       		.uleb128 0x5
 2378 0150 49       		.uleb128 0x49
 2379 0151 13       		.uleb128 0x13
 2380 0152 02       		.uleb128 0x2
 2381 0153 18       		.uleb128 0x18
 2382 0154 00       		.byte	0
 2383 0155 00       		.byte	0
 2384 0156 14       		.uleb128 0x14
 2385 0157 2E       		.uleb128 0x2e
 2386 0158 00       		.byte	0
 2387 0159 3F       		.uleb128 0x3f
 2388 015a 19       		.uleb128 0x19
 2389 015b 03       		.uleb128 0x3
 2390 015c 0E       		.uleb128 0xe
 2391 015d 3A       		.uleb128 0x3a
 2392 015e 0B       		.uleb128 0xb
 2393 015f 3B       		.uleb128 0x3b
 2394 0160 05       		.uleb128 0x5
 2395 0161 49       		.uleb128 0x49
 2396 0162 13       		.uleb128 0x13
 2397 0163 11       		.uleb128 0x11
 2398 0164 01       		.uleb128 0x1
 2399 0165 12       		.uleb128 0x12
 2400 0166 06       		.uleb128 0x6
 2401 0167 40       		.uleb128 0x40
 2402 0168 18       		.uleb128 0x18
 2403 0169 9642     		.uleb128 0x2116
 2404 016b 19       		.uleb128 0x19
 2405 016c 00       		.byte	0
 2406 016d 00       		.byte	0
 2407 016e 15       		.uleb128 0x15
 2408 016f 34       		.uleb128 0x34
 2409 0170 00       		.byte	0
 2410 0171 03       		.uleb128 0x3
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 50


 2411 0172 0E       		.uleb128 0xe
 2412 0173 3A       		.uleb128 0x3a
 2413 0174 0B       		.uleb128 0xb
 2414 0175 3B       		.uleb128 0x3b
 2415 0176 05       		.uleb128 0x5
 2416 0177 49       		.uleb128 0x49
 2417 0178 13       		.uleb128 0x13
 2418 0179 3F       		.uleb128 0x3f
 2419 017a 19       		.uleb128 0x19
 2420 017b 3C       		.uleb128 0x3c
 2421 017c 19       		.uleb128 0x19
 2422 017d 00       		.byte	0
 2423 017e 00       		.byte	0
 2424 017f 16       		.uleb128 0x16
 2425 0180 35       		.uleb128 0x35
 2426 0181 00       		.byte	0
 2427 0182 49       		.uleb128 0x49
 2428 0183 13       		.uleb128 0x13
 2429 0184 00       		.byte	0
 2430 0185 00       		.byte	0
 2431 0186 17       		.uleb128 0x17
 2432 0187 34       		.uleb128 0x34
 2433 0188 00       		.byte	0
 2434 0189 03       		.uleb128 0x3
 2435 018a 0E       		.uleb128 0xe
 2436 018b 3A       		.uleb128 0x3a
 2437 018c 0B       		.uleb128 0xb
 2438 018d 3B       		.uleb128 0x3b
 2439 018e 0B       		.uleb128 0xb
 2440 018f 49       		.uleb128 0x49
 2441 0190 13       		.uleb128 0x13
 2442 0191 3F       		.uleb128 0x3f
 2443 0192 19       		.uleb128 0x19
 2444 0193 02       		.uleb128 0x2
 2445 0194 18       		.uleb128 0x18
 2446 0195 00       		.byte	0
 2447 0196 00       		.byte	0
 2448 0197 00       		.byte	0
 2449              		.section	.debug_aranges,"",%progbits
 2450 0000 F4000000 		.4byte	0xf4
 2451 0004 0200     		.2byte	0x2
 2452 0006 00000000 		.4byte	.Ldebug_info0
 2453 000a 04       		.byte	0x4
 2454 000b 00       		.byte	0
 2455 000c 0000     		.2byte	0
 2456 000e 0000     		.2byte	0
 2457 0010 00000000 		.4byte	.LFB63
 2458 0014 16000000 		.4byte	.LFE63-.LFB63
 2459 0018 00000000 		.4byte	.LFB64
 2460 001c 94000000 		.4byte	.LFE64-.LFB64
 2461 0020 00000000 		.4byte	.LFB65
 2462 0024 24000000 		.4byte	.LFE65-.LFB65
 2463 0028 00000000 		.4byte	.LFB66
 2464 002c 18000000 		.4byte	.LFE66-.LFB66
 2465 0030 00000000 		.4byte	.LFB67
 2466 0034 22000000 		.4byte	.LFE67-.LFB67
 2467 0038 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 51


 2468 003c 34000000 		.4byte	.LFE68-.LFB68
 2469 0040 00000000 		.4byte	.LFB69
 2470 0044 22000000 		.4byte	.LFE69-.LFB69
 2471 0048 00000000 		.4byte	.LFB70
 2472 004c 2C000000 		.4byte	.LFE70-.LFB70
 2473 0050 00000000 		.4byte	.LFB71
 2474 0054 3C000000 		.4byte	.LFE71-.LFB71
 2475 0058 00000000 		.4byte	.LFB72
 2476 005c 26000000 		.4byte	.LFE72-.LFB72
 2477 0060 00000000 		.4byte	.LFB73
 2478 0064 54000000 		.4byte	.LFE73-.LFB73
 2479 0068 00000000 		.4byte	.LFB74
 2480 006c 26000000 		.4byte	.LFE74-.LFB74
 2481 0070 00000000 		.4byte	.LFB75
 2482 0074 26000000 		.4byte	.LFE75-.LFB75
 2483 0078 00000000 		.4byte	.LFB76
 2484 007c 34000000 		.4byte	.LFE76-.LFB76
 2485 0080 00000000 		.4byte	.LFB77
 2486 0084 34000000 		.4byte	.LFE77-.LFB77
 2487 0088 00000000 		.4byte	.LFB78
 2488 008c 16000000 		.4byte	.LFE78-.LFB78
 2489 0090 00000000 		.4byte	.LFB79
 2490 0094 14000000 		.4byte	.LFE79-.LFB79
 2491 0098 00000000 		.4byte	.LFB80
 2492 009c 7A000000 		.4byte	.LFE80-.LFB80
 2493 00a0 00000000 		.4byte	.LFB81
 2494 00a4 40000000 		.4byte	.LFE81-.LFB81
 2495 00a8 00000000 		.4byte	.LFB82
 2496 00ac 34000000 		.4byte	.LFE82-.LFB82
 2497 00b0 00000000 		.4byte	.LFB83
 2498 00b4 3E000000 		.4byte	.LFE83-.LFB83
 2499 00b8 00000000 		.4byte	.LFB84
 2500 00bc 3C000000 		.4byte	.LFE84-.LFB84
 2501 00c0 00000000 		.4byte	.LFB85
 2502 00c4 40000000 		.4byte	.LFE85-.LFB85
 2503 00c8 00000000 		.4byte	.LFB86
 2504 00cc 18000000 		.4byte	.LFE86-.LFB86
 2505 00d0 00000000 		.4byte	.LFB87
 2506 00d4 18000000 		.4byte	.LFE87-.LFB87
 2507 00d8 00000000 		.4byte	.LFB88
 2508 00dc 18000000 		.4byte	.LFE88-.LFB88
 2509 00e0 00000000 		.4byte	.LFB89
 2510 00e4 18000000 		.4byte	.LFE89-.LFB89
 2511 00e8 00000000 		.4byte	.LFB90
 2512 00ec 0E000000 		.4byte	.LFE90-.LFB90
 2513 00f0 00000000 		.4byte	0
 2514 00f4 00000000 		.4byte	0
 2515              		.section	.debug_ranges,"",%progbits
 2516              	.Ldebug_ranges0:
 2517 0000 00000000 		.4byte	.LFB63
 2518 0004 16000000 		.4byte	.LFE63
 2519 0008 00000000 		.4byte	.LFB64
 2520 000c 94000000 		.4byte	.LFE64
 2521 0010 00000000 		.4byte	.LFB65
 2522 0014 24000000 		.4byte	.LFE65
 2523 0018 00000000 		.4byte	.LFB66
 2524 001c 18000000 		.4byte	.LFE66
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 52


 2525 0020 00000000 		.4byte	.LFB67
 2526 0024 22000000 		.4byte	.LFE67
 2527 0028 00000000 		.4byte	.LFB68
 2528 002c 34000000 		.4byte	.LFE68
 2529 0030 00000000 		.4byte	.LFB69
 2530 0034 22000000 		.4byte	.LFE69
 2531 0038 00000000 		.4byte	.LFB70
 2532 003c 2C000000 		.4byte	.LFE70
 2533 0040 00000000 		.4byte	.LFB71
 2534 0044 3C000000 		.4byte	.LFE71
 2535 0048 00000000 		.4byte	.LFB72
 2536 004c 26000000 		.4byte	.LFE72
 2537 0050 00000000 		.4byte	.LFB73
 2538 0054 54000000 		.4byte	.LFE73
 2539 0058 00000000 		.4byte	.LFB74
 2540 005c 26000000 		.4byte	.LFE74
 2541 0060 00000000 		.4byte	.LFB75
 2542 0064 26000000 		.4byte	.LFE75
 2543 0068 00000000 		.4byte	.LFB76
 2544 006c 34000000 		.4byte	.LFE76
 2545 0070 00000000 		.4byte	.LFB77
 2546 0074 34000000 		.4byte	.LFE77
 2547 0078 00000000 		.4byte	.LFB78
 2548 007c 16000000 		.4byte	.LFE78
 2549 0080 00000000 		.4byte	.LFB79
 2550 0084 14000000 		.4byte	.LFE79
 2551 0088 00000000 		.4byte	.LFB80
 2552 008c 7A000000 		.4byte	.LFE80
 2553 0090 00000000 		.4byte	.LFB81
 2554 0094 40000000 		.4byte	.LFE81
 2555 0098 00000000 		.4byte	.LFB82
 2556 009c 34000000 		.4byte	.LFE82
 2557 00a0 00000000 		.4byte	.LFB83
 2558 00a4 3E000000 		.4byte	.LFE83
 2559 00a8 00000000 		.4byte	.LFB84
 2560 00ac 3C000000 		.4byte	.LFE84
 2561 00b0 00000000 		.4byte	.LFB85
 2562 00b4 40000000 		.4byte	.LFE85
 2563 00b8 00000000 		.4byte	.LFB86
 2564 00bc 18000000 		.4byte	.LFE86
 2565 00c0 00000000 		.4byte	.LFB87
 2566 00c4 18000000 		.4byte	.LFE87
 2567 00c8 00000000 		.4byte	.LFB88
 2568 00cc 18000000 		.4byte	.LFE88
 2569 00d0 00000000 		.4byte	.LFB89
 2570 00d4 18000000 		.4byte	.LFE89
 2571 00d8 00000000 		.4byte	.LFB90
 2572 00dc 0E000000 		.4byte	.LFE90
 2573 00e0 00000000 		.4byte	0
 2574 00e4 00000000 		.4byte	0
 2575              		.section	.debug_line,"",%progbits
 2576              	.Ldebug_line0:
 2577 0000 C1030000 		.section	.debug_str,"MS",%progbits,1
 2577      02003D01 
 2577      00000201 
 2577      FB0E0D00 
 2577      01010101 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 53


 2578              	.LASF51:
 2579 0000 6E726632 		.ascii	"nrf24_payload_length\000"
 2579      345F7061 
 2579      796C6F61 
 2579      645F6C65 
 2579      6E677468 
 2580              	.LASF30:
 2581 0015 6E726632 		.ascii	"nrf24_send\000"
 2581      345F7365 
 2581      6E6400
 2582              	.LASF47:
 2583 0020 73746174 		.ascii	"state\000"
 2583      6500
 2584              	.LASF2:
 2585 0026 73686F72 		.ascii	"short int\000"
 2585      7420696E 
 2585      7400
 2586              	.LASF16:
 2587 0030 73697A65 		.ascii	"sizetype\000"
 2587      74797065 
 2587      00
 2588              	.LASF35:
 2589 0039 6E726632 		.ascii	"nrf24_init\000"
 2589      345F696E 
 2589      697400
 2590              	.LASF33:
 2591 0044 6E726632 		.ascii	"nrf24_getStatus\000"
 2591      345F6765 
 2591      74537461 
 2591      74757300 
 2592              	.LASF57:
 2593 0054 433A5C55 		.ascii	"C:\\Users\\Lukas Creutzburg\\Documents\\GitHub\\fre"
 2593      73657273 
 2593      5C4C756B 
 2593      61732043 
 2593      72657574 
 2594 0082 65445350 		.ascii	"eDSPPSoC-I2C\\PSoC5_SPI_Master_CapSense.cydsn\000"
 2594      50536F43 
 2594      2D493243 
 2594      5C50536F 
 2594      43355F53 
 2595              	.LASF31:
 2596 00af 76616C75 		.ascii	"value\000"
 2596      6500
 2597              	.LASF11:
 2598 00b5 75696E74 		.ascii	"uint8_t\000"
 2598      385F7400 
 2599              	.LASF45:
 2600 00bd 6E726632 		.ascii	"nrf24_writeRegister\000"
 2600      345F7772 
 2600      69746552 
 2600      65676973 
 2600      74657200 
 2601              	.LASF36:
 2602 00d1 6E726632 		.ascii	"nrf24_powerUpRx\000"
 2602      345F706F 
 2602      77657255 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 54


 2602      70527800 
 2603              	.LASF25:
 2604 00e1 6669666F 		.ascii	"fifoStatus\000"
 2604      53746174 
 2604      757300
 2605              	.LASF40:
 2606 00ec 64617461 		.ascii	"dataout\000"
 2606      6F757400 
 2607              	.LASF13:
 2608 00f4 666C6F61 		.ascii	"float\000"
 2608      7400
 2609              	.LASF46:
 2610 00fa 6E726632 		.ascii	"nrf24_ce_digitalWrite\000"
 2610      345F6365 
 2610      5F646967 
 2610      6974616C 
 2610      57726974 
 2611              	.LASF8:
 2612 0110 6C6F6E67 		.ascii	"long long int\000"
 2612      206C6F6E 
 2612      6720696E 
 2612      7400
 2613              	.LASF55:
 2614 011e 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2614      4320342E 
 2614      392E3320 
 2614      32303135 
 2614      30333033 
 2615 0151 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2615      20726576 
 2615      6973696F 
 2615      6E203232 
 2615      31323230 
 2616 0184 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2616      66756E63 
 2616      74696F6E 
 2616      2D736563 
 2616      74696F6E 
 2617              	.LASF22:
 2618 01ac 6E726632 		.ascii	"nrf24_dataReady\000"
 2618      345F6461 
 2618      74615265 
 2618      61647900 
 2619              	.LASF27:
 2620 01bc 6E726632 		.ascii	"nrf24_getData\000"
 2620      345F6765 
 2620      74446174 
 2620      6100
 2621              	.LASF58:
 2622 01ca 7370695F 		.ascii	"spi_transfer\000"
 2622      7472616E 
 2622      73666572 
 2622      00
 2623              	.LASF23:
 2624 01d7 6E726632 		.ascii	"nrf24_rxFifoEmpty\000"
 2624      345F7278 
 2624      4669666F 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 55


 2624      456D7074 
 2624      7900
 2625              	.LASF50:
 2626 01e9 6E726632 		.ascii	"nrf24_mosi_digitalWrite\000"
 2626      345F6D6F 
 2626      73695F64 
 2626      69676974 
 2626      616C5772 
 2627              	.LASF18:
 2628 0201 7061795F 		.ascii	"pay_length\000"
 2628      6C656E67 
 2628      746800
 2629              	.LASF26:
 2630 020c 6E726632 		.ascii	"nrf24_payloadLength\000"
 2630      345F7061 
 2630      796C6F61 
 2630      644C656E 
 2630      67746800 
 2631              	.LASF1:
 2632 0220 756E7369 		.ascii	"unsigned char\000"
 2632      676E6564 
 2632      20636861 
 2632      7200
 2633              	.LASF34:
 2634 022e 6E726632 		.ascii	"nrf24_lastMessageStatus\000"
 2634      345F6C61 
 2634      73744D65 
 2634      73736167 
 2634      65537461 
 2635              	.LASF29:
 2636 0246 6E726632 		.ascii	"nrf24_retransmissionCount\000"
 2636      345F7265 
 2636      7472616E 
 2636      736D6973 
 2636      73696F6E 
 2637              	.LASF0:
 2638 0260 7369676E 		.ascii	"signed char\000"
 2638      65642063 
 2638      68617200 
 2639              	.LASF9:
 2640 026c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2640      206C6F6E 
 2640      6720756E 
 2640      7369676E 
 2640      65642069 
 2641              	.LASF10:
 2642 0283 756E7369 		.ascii	"unsigned int\000"
 2642      676E6564 
 2642      20696E74 
 2642      00
 2643              	.LASF32:
 2644 0290 6E726632 		.ascii	"nrf24_isSending\000"
 2644      345F6973 
 2644      53656E64 
 2644      696E6700 
 2645              	.LASF4:
 2646 02a0 5F5F7569 		.ascii	"__uint8_t\000"
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 56


 2646      6E74385F 
 2646      7400
 2647              	.LASF44:
 2648 02aa 6E726632 		.ascii	"nrf24_readRegister\000"
 2648      345F7265 
 2648      61645265 
 2648      67697374 
 2648      657200
 2649              	.LASF19:
 2650 02bd 6E726632 		.ascii	"nrf24_config\000"
 2650      345F636F 
 2650      6E666967 
 2650      00
 2651              	.LASF3:
 2652 02ca 73686F72 		.ascii	"short unsigned int\000"
 2652      7420756E 
 2652      7369676E 
 2652      65642069 
 2652      6E7400
 2653              	.LASF24:
 2654 02dd 73746174 		.ascii	"status\000"
 2654      757300
 2655              	.LASF15:
 2656 02e4 63686172 		.ascii	"char\000"
 2656      00
 2657              	.LASF6:
 2658 02e9 6C6F6E67 		.ascii	"long int\000"
 2658      20696E74 
 2658      00
 2659              	.LASF12:
 2660 02f2 696E7433 		.ascii	"int32_t\000"
 2660      325F7400 
 2661              	.LASF56:
 2662 02fa 2E5C6E72 		.ascii	".\\nrf24.c\000"
 2662      6632342E 
 2662      6300
 2663              	.LASF49:
 2664 0304 6E726632 		.ascii	"nrf24_sck_digitalWrite\000"
 2664      345F7363 
 2664      6B5F6469 
 2664      67697461 
 2664      6C577269 
 2665              	.LASF17:
 2666 031b 6368616E 		.ascii	"channel\000"
 2666      6E656C00 
 2667              	.LASF28:
 2668 0323 64617461 		.ascii	"data\000"
 2668      00
 2669              	.LASF42:
 2670 0328 6E726632 		.ascii	"nrf24_transmitSync\000"
 2670      345F7472 
 2670      616E736D 
 2670      69745379 
 2670      6E6300
 2671              	.LASF7:
 2672 033b 6C6F6E67 		.ascii	"long unsigned int\000"
 2672      20756E73 
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 57


 2672      69676E65 
 2672      6420696E 
 2672      7400
 2673              	.LASF14:
 2674 034d 646F7562 		.ascii	"double\000"
 2674      6C6500
 2675              	.LASF21:
 2676 0354 6E726632 		.ascii	"nrf24_tx_address\000"
 2676      345F7478 
 2676      5F616464 
 2676      72657373 
 2676      00
 2677              	.LASF39:
 2678 0365 6E726632 		.ascii	"nrf24_transferSync\000"
 2678      345F7472 
 2678      616E7366 
 2678      65725379 
 2678      6E6300
 2679              	.LASF37:
 2680 0378 6E726632 		.ascii	"nrf24_powerUpTx\000"
 2680      345F706F 
 2680      77657255 
 2680      70547800 
 2681              	.LASF38:
 2682 0388 6E726632 		.ascii	"nrf24_powerDown\000"
 2682      345F706F 
 2682      77657244 
 2682      6F776E00 
 2683              	.LASF5:
 2684 0398 5F5F696E 		.ascii	"__int32_t\000"
 2684      7433325F 
 2684      7400
 2685              	.LASF52:
 2686 03a2 6E726632 		.ascii	"nrf24_miso_digitalRead\000"
 2686      345F6D69 
 2686      736F5F64 
 2686      69676974 
 2686      616C5265 
 2687              	.LASF48:
 2688 03b9 6E726632 		.ascii	"nrf24_csn_digitalWrite\000"
 2688      345F6373 
 2688      6E5F6469 
 2688      67697461 
 2688      6C577269 
 2689              	.LASF54:
 2690 03d0 7061796C 		.ascii	"payload_len\000"
 2690      6F61645F 
 2690      6C656E00 
 2691              	.LASF53:
 2692 03dc 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2692      52784275 
 2692      66666572 
 2692      00
 2693              	.LASF41:
 2694 03e9 64617461 		.ascii	"datain\000"
 2694      696E00
 2695              	.LASF20:
ARM GAS  C:\Users\LUKASC~1\AppData\Local\Temp\ccGYsBGB.s 			page 58


 2696 03f0 6E726632 		.ascii	"nrf24_rx_address\000"
 2696      345F7278 
 2696      5F616464 
 2696      72657373 
 2696      00
 2697              	.LASF43:
 2698 0401 6E726632 		.ascii	"nrf24_configRegister\000"
 2698      345F636F 
 2698      6E666967 
 2698      52656769 
 2698      73746572 
 2699              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
