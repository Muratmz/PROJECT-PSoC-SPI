UART receive prototype:

/* Wait for input data from PC */
        while(USBUART_1_DataIsReady() == 0u);
        USBUART_1_GetAll(rdBuffer);

        /* Convert ASCII value in rdBuffer to numerical value:
         * Note that ASCII 48, 49,...,57 (decimal) corresponds to 0,1,...,9
         */
        rdValue = rdBuffer[0] - ASCII_DECIMAL_ZERO;

        /* If the value read is not a number in the range [0,7] */
        if(rdValue & ERROR_MASK)
        {
            PrintToUSBUART("Input Error!\n\r\n\r");
        }

        else /* The input from user is valid */
        {
            /* If this input is in the range [0,3], use mux0 */
            if(!(rdValue/MUX_SIZE))
            {
                AMux_0_FastSelect(rdValue);

                /* Initiate a single conversion of input data (ADC is in triggered
                 * mode).
                 */
                ADC_SAR_0_StartConvert();
                ADC_SAR_0_IsEndConversion(ADC_SAR_0_WAIT_FOR_RESULT);
                adcReading = ADC_SAR_0_GetResult16();

                sprintf((char *)wrBuffer, "The ADC_0 channel(%d) is: 0x%4x \n\r\n\r",
                                                            (int)rdValue, adcReading);
            }

            else
            {
                /* If rdValue is between [4,7], scale down to [0,3] */
                AMux_1_FastSelect(rdValue % MUX_SIZE);

                ADC_SAR_1_StartConvert();
                ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);
                adcReading = ADC_SAR_1_GetResult16();

                sprintf((char *)wrBuffer, "The ADC_1 channel(%d) is: 0x%4x \n\r\n\r",
                                                (int)(rdValue % MUX_SIZE), adcReading);
            }

            PrintToUSBUART((char8 *)wrBuffer);
        }